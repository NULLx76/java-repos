<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tomee-bugs</groupId>
    <artifactId>corba-serilization-infinite-loop-root</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <name>${artifactId}</name>
   
    <modules>
        <!-- This is the foundation 
            We put some entities, some EJBs, etc...
            But let us suppose we put no persistence.xml
            Because we have no idea how the final project will look like.
            Here we have only one EJB project, but we could have hundreds
            of different jar files like this one that would in the end be glued up.
        -->
        <module>corba-serilization-infinite-loop-core-ejb</module>
                
        <!--
             The following, are the two are final layers.
             It glues up all the ejb projects that may exist
             Profies the persistence.xml
        -->
        <module>corba-serilization-infinite-loop-main-ejb</module>                
        <module>corba-serilization-infinite-loop-war</module>	
    </modules>

    <repositories>
        <repository>
            <id>EclipseLink Repository</id>
            <url>http://download.eclipse.org/rt/eclipselink/maven.repo/</url>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <!-- Non External Dependencies -->
            <dependency>
                <groupId>tomee-bugs</groupId>
                <artifactId>corba-serilization-infinite-loop-core-ejb</artifactId>
                <version>1.0-SNAPSHOT</version>
                <scope>compile</scope>
            </dependency>
        
            <dependency>
                <groupId>tomee-bugs</groupId>
                <artifactId>corba-serilization-infinite-loop-main-ejb</artifactId>
                <version>1.0-SNAPSHOT</version>
                <scope>compile</scope>
            </dependency>

            <!-- ******************************************** JSF & JSF Libraries ******************************************** -->
            <dependency>
                <groupId>org.apache.deltaspike.core</groupId>
                <artifactId>deltaspike-core-api</artifactId>
                <version>1.4.0</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.deltaspike.core</groupId>
                <artifactId>deltaspike-core-impl</artifactId>
                <version>1.4.0</version>
                <scope>runtime</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.deltaspike.modules</groupId>
                <artifactId>deltaspike-jsf-module-api</artifactId>
                <version>1.4.0</version>
                <scope>compile</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.deltaspike.modules</groupId>
                <artifactId>deltaspike-jsf-module-impl-ee6</artifactId>
                <version>1.4.0</version>
                <scope>runtime</scope>
            </dependency>

            <dependency>
                <groupId>org.primefaces</groupId>
                <artifactId>primefaces</artifactId>
                <version>5.2</version>
            </dependency>

            <!-- JEE 6 -->
            <!-- ******************************************** JEE 6 APIs ******************************************** -->
                   
            <!--dependency>
                <groupId>org.jboss.weld</groupId>
                <artifactId>weld-core</artifactId>
                <version>1.1.8.Final</version>
                <scope>provided</scope>
            </dependency-->

            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
                <version>1.2</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>3.0.1</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.glassfish</groupId>
                <artifactId>javax.faces</artifactId>
                <version>2.1.25</version>
                <scope>provided</scope>
            </dependency>
        

            <dependency>
                <groupId>javax.el</groupId>
                <artifactId>el-api</artifactId>
                <version>2.2</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>com.sun.el</groupId>
                <artifactId>el-ri</artifactId>
                <version>1.0</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>javax.enterprise</groupId>
                <artifactId>cdi-api</artifactId>
                <version>1.0</version>
                <scope>provided</scope>
            </dependency>
            
            <dependency>
                <groupId>javax.jms</groupId>
                <artifactId>jms-api</artifactId>
                <version>1.1-rev-1</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <!-- Fixes Absent Code attribute in method that is not native or abstract in class file javax/transaction/SystemException-->
                <groupId>org.glassfish.main.transaction</groupId>
                <artifactId>javax.transaction</artifactId>
                <version>3.1.2</version>
                <scope>provided</scope>
            </dependency>        
            <!-- This packages seems to leak into the unit test excution
                and its javax.transaction.SystemException is just a shell without code.
                Weblogic full client ahas the true implementation but it
                has a bad interfaces for the entity manager, whereby the em.getPropreties() does not work if weblogic
                sits in the front of this library to compile the create database.
            -->
            <dependency>            
                <groupId>javax</groupId>
                <artifactId>javaee-api</artifactId>
                <version>6.0</version>
                <scope>provided</scope>
            </dependency>                       
        
        
            <!-- ******************************************** MISC ******************************************** -->     
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.1</version>
                <scope>provided</scope>
            </dependency>
        
            <!-- ******************************************** UNIT TESTS ******************************************** -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.11</version>
                <scope>test</scope>
            </dependency>
        
            <!-- JNDI EJB Client for weblogic -->
            <!--dependency>       
                <groupId>groupId</groupId>
                <artifactId>artifactId</artifactId>
                <version>1.0</version>
                <scope>system</scope>
                <systemPath>${env.MW_HOME}/wlserver/server/lib/wlfullclient.jar</systemPath>                      
            </dependency-->    
		
            <!-- Full client dependency -->
            <dependency>
                <groupId>org.glassfish.main.appclient.client</groupId>
                <artifactId>gf-client</artifactId>
                <version>3.1.2.2</version>
                <scope>test</scope>
            </dependency>
        
            <!--dependency>
                <groupId>org.glassfish</groupId>
                <artifactId>javax.ejb</artifactId>
                <version>3.1.1</version>
            </dependency-->
 
        </dependencies>
    </dependencyManagement>
   
    <build>
        <finalName>${project.artifactId}-${project.version}</finalName>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.5.1</version>
                    <configuration>
                        <source>1.7</source>
                        <target>1.7</target>
                    </configuration>
                </plugin>
				<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-ejb-plugin</artifactId>
                <configuration>
					<ejbVersion>3.1</ejbVersion>
                    <generateClient>true</generateClient>
                    <clientIncludes>
						<clientInclude>configuration/**</clientInclude>
                        <clientInclude>**/persistence.xml</clientInclude>
                        <clientInclude>**/api/**</clientInclude>
                        <clientInclude>**/model/**</clientInclude>
                    </clientIncludes>
                    <clientExcludes>
                        <clientExclude>**/impl/**</clientExclude>
					</clientExcludes>
				</configuration>
			</plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>2.3</version>
                    <configuration>
                        <packagingExcludes>**/rebel.xml</packagingExcludes>
                        <outputFileNameMapping>@{artifactId}@.@{extension}@</outputFileNameMapping>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-eclipse-plugin</artifactId>
                    <version>2.9</version>
                    <configuration>
                        <wtpversion>2.0</wtpversion>
                        <downloadSources>true</downloadSources>
                        <downloadJavadocs>true</downloadJavadocs>
                        <additionalProjectnatures>
                            <projectnature>org.jboss.tools.jst.web.kb.kbnature</projectnature>
                        </additionalProjectnatures>
                        <buildcommands>
                            <buildcommand>org.eclipse.jdt.core.javabuilder</buildcommand>
                            <buildcommand>org.eclipse.wst.common.project.facet.core.builder</buildcommand>
                            <buildcommand>org.jboss.tools.jst.web.kb.kbbuilder</buildcommand>
                            <buildcommand>org.eclipse.wst.validation.validationbuilder</buildcommand>
                        </buildcommands>
                        <additionalProjectFacets>
                            <jst.web>3.0</jst.web>
                            <jst.jsf>2.1</jst.jsf>
                            <jst.cdi>1.0</jst.cdi>
                        </additionalProjectFacets>
                    </configuration>
                </plugin>
                
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.18.1</version>
                    <configuration>
                        <!-- Use this property to check how big a stack is needed
                        when transferring enroumous JPA data structures from corpa.
                        7Megabytes eesm to allow to return a 1000 deep netested recursive entities without a stack overflow.                      
                        -->
                        <argLine>-Xss7m</argLine>
                        <systemProperties>
                            <property>
                                <name>putYourPropertiesHere</name>           
                            </property>
                        </systemProperties>
                        <!--We want to exclude the javaee api from test runtime dependency since CORBA will just break
                           with class missing implementation errors.
                        -->
                        <classpathDependencyExcludes>
                            <classpathDependencyExcludes>javax:javaee-api</classpathDependencyExcludes>
                        </classpathDependencyExcludes>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>
