<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.kholodkov</groupId>
  <artifactId>eshop</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>eshop Maven Webapp</name>
  <url>http://maven.apache.org</url>
  <properties>
    <jdk.version>1.8</jdk.version>
    <spring.version>4.1.4.RELEASE</spring.version>
    <jstl.version>1.2</jstl.version>
    <junit.version>4.11</junit.version>
    <logback.version>1.1.2</logback.version>
    <jcl-over-slf4j.version>1.7.7</jcl-over-slf4j.version>
    <servlet-api.version>3.1.0</servlet-api.version>
    <asepectj.version>1.8.5</asepectj.version>
  </properties>

  <dependencies>
    <!--Servlet API-->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>${servlet-api.version}</version>
      <!--SCOPE description is follow:-->
      <!-- scope =
      COMPILE means that dependency will be add to:
        YES compile classpath
        YES test classpath
        YES project classpath (directory /lib in project)

      PROVIDED means that dependency will be add to:
        YES compile classpath
        YES test classpath
        NO  project classpath (directory /lib in project)

      RUNTIME means that dependency will be add to:
        NO  compile classpath
        YES test classpath
        YES project classpath (directory /lib in project)

      TEST means that dependency will be add to:
        NO  compile classpath
        YES test classpath
        NO  project classpath (directory /lib in project)

      SYSTEM means that dependency will be add to:
        YES compile classpath
        YES test classpath
        NO  project classpath (directory /lib in project)
      This scope is similar to PROVIDED except that I have to provide JAR which contains it explicitly.
      The artifact is always available and is not looked up in repository.
      -->
      <scope>provided</scope>
    </dependency>

    <!--SPRING CORE-->
    <!--Core utilities used by other modules-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
      <version>${spring.version}</version>
      <scope>compile</scope>
    </dependency>
    <!--Bean Factory and JavaBeans utility(dependents on spring-core)-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-beans</artifactId>
      <version>${spring.version}</version>
      <scope>compile</scope>
    </dependency>
    <!--Application Context(dependents on spring-core, spring-beans)-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context</artifactId>
      <version>${spring.version}</version>
      <scope>compile</scope>
    </dependency>
    <!--Context Support providers support for integration third-party libraries-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-context-support</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <!--Spring Expression Language-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-expression</artifactId>
      <version>${spring.version}</version>
    </dependency>

    <!--SPRING AOP-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-aop</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
      <version>${asepectj.version}</version>
    </dependency>
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>${asepectj.version}</version>
    </dependency>

    <!--SPRING WEB-->
    <!--Spring-web-->
    <!--<dependency>-->
      <!--<groupId>org.springframework</groupId>-->
      <!--<artifactId>spring-web</artifactId>-->
      <!--<version>${spring.version}</version>-->
    <!--</dependency>-->
    <!--Spring-MVC-->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${spring.version}</version>
    </dependency>
    <!--Unit Test-->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>${jcl-over-slf4j.version}</version>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
    </dependency>

    <!--jstl-->
    <dependency>
      <groupId>jstl</groupId>
      <artifactId>jstl</artifactId>
      <version>${jstl.version}</version>
    </dependency>

  </dependencies>

  <build>
    <finalName>eshop</finalName>
    <pluginManagement>
      <plugins>
        <!--Set JDK Compiler Level-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.2</version>
          <configuration>
            <source>${jdk.version}</source>
            <target>${jdk.version}</target>
          </configuration>
        </plugin>
        <!--For Maven Tomcat Plugin-->
        <plugin>
          <groupId>org.apache.tomcat.maven</groupId>
          <artifactId>tomcat7-maven-plugin</artifactId>
          <version>2.2</version>
          <configuration>
            <path>/eshop</path>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
