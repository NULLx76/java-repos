<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.mycompany</groupId>
    <artifactId>Doc</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>Document CRUD</name>

    <properties>
        <!-- Explicitly declaring the source encoding eliminates the following
            message: -->
        <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
            resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JBoss dependency versions -->
        <version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>

        <!-- Define the version of the JBoss BOMs we want to import to specify
            tested stacks. -->
        <version.jboss.bom>10.1.0.Final</version.jboss.bom>

        <!-- other plug-in versions -->
        <version.surefire.plugin>2.16</version.surefire.plugin>
        <version.war.plugin>3.0.0</version.war.plugin>

        <!-- Apache versions -->
        <httpclient.version>4.5</httpclient.version>
        <commons-io.version>2.4</commons-io.version>

        <!-- maven-compiler-plugin -->
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.compiler.source>1.8</maven.compiler.source>
    </properties>

    <modules>
        <module>doc-web</module>
        <module>doc-ejb</module>
    </modules>

    <dependencyManagement>
      <dependencies>
              <dependency>
                  <groupId>com.mycompany</groupId>
                  <artifactId>doc-ejb</artifactId>
                  <version>1.0-SNAPSHOT</version>
              </dependency>
          <!-- JBoss distributes a complete set of Java EE 7 APIs including a Bill
              of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection)
              of artifacts. We use this here so that we always get the correct versions
              of artifacts. Here we use the jboss-javaee-7.0-with tools stack (you can read this as
              the JBoss stack of the Java EE 7 APIs, with some extras tools for your project, such
              as Arquillian for testing) -->
    <dependency>
        <groupId>org.wildfly.bom</groupId>
        <artifactId>wildfly-javaee7-with-tools</artifactId>
        <version>${version.jboss.bom}</version>
        <type>pom</type>
        <scope>import</scope>
    </dependency>
    <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>${httpclient.version}</version>
    </dependency>
    <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>${commons-io.version}</version>
    </dependency>
</dependencies>
        </dependencyManagement>

<dependencies>
    <!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP -->
    <dependency>
        <groupId>org.hibernate.javax.persistence</groupId>
        <artifactId>hibernate-jpa-2.1-api</artifactId>
        <scope>provided</scope>
    </dependency>

    <!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP -->
    <dependency>
        <groupId>org.jboss.spec.javax.transaction</groupId>
        <artifactId>jboss-transaction-api_1.2_spec</artifactId>
        <scope>provided</scope>
    </dependency>

    <!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP -->
    <dependency>
        <groupId>org.jboss.spec.javax.ejb</groupId>
        <artifactId>jboss-ejb-api_3.2_spec</artifactId>
        <scope>provided</scope>
    </dependency>
<!-- First declare the APIs we depend on and need for compilation. All
    of them are provided by WildFly -->

<!-- Import the CDI API, we use provided scope as the API is included in
    WildFly -->
<dependency>
    <groupId>javax.enterprise</groupId>
    <artifactId>cdi-api</artifactId>
    <scope>provided</scope>
</dependency>

<!-- Import the Common Annotations API (JSR-250), we use provided scope
    as the API is included in WildFly -->
<dependency>
    <groupId>org.jboss.spec.javax.annotation</groupId>
    <artifactId>jboss-annotations-api_1.2_spec</artifactId>
    <scope>provided</scope>
</dependency>

<!-- Import the JAX-RS API, we use provided scope as the API is included
    in WildFly -->
<dependency>
    <groupId>org.jboss.spec.javax.ws.rs</groupId>
    <artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
    <scope>provided</scope>
</dependency>

<!-- Import the RestEasy Client and Jackson provider, we use test scope as we need that for test purposes -->
<dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-client</artifactId>
    <scope>test</scope>
</dependency>

<dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-jackson2-provider</artifactId>
    <scope>test</scope>
</dependency>

<!-- Now we declare the dependencies needed by the  jaxrs-client -->
<dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpclient</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <scope>test</scope>
</dependency>



<!-- Needed for running tests (you may also use TestNG) -->
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <scope>test</scope>
</dependency>

</dependencies>

<build>
<!-- Maven will append the version to the finalName (which is the name
    given to the generated WAR, and hence the context root) -->
<finalName>${project.artifactId}</finalName>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-ejb-plugin</artifactId>
            <version>2.5.1</version>
            <configuration>
                <ejbVersion>3.1</ejbVersion>
            </configuration>
        </plugin>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>${version.war.plugin}</version>
            <configuration>
            <webXml>src/main/webapp/WEB-INF/web.xml</webXml>
            </configuration>
        </plugin>
        <!-- WildFly plug-in to deploy the WAR to a local WildFly container -->
        <!-- To use, run: mvn package wildfly:deploy -->
        <plugin>
            <groupId>org.wildfly.plugins</groupId>
            <artifactId>wildfly-maven-plugin</artifactId>
            <version>${version.wildfly.maven.plugin}</version>
        </plugin>
    </plugins>
</build>

<profiles>
<profile>
    <!-- The default profile skips all tests, though you can tune it to run
        just unit tests based on a custom pattern -->
    <!-- Separate profiles are provided for running all tests, including Arquillian
        tests that execute in the specified container -->
    <id>default</id>
    <activation>
        <activeByDefault>true</activeByDefault>
    </activation>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${version.surefire.plugin}</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
</profile>

</profiles>
</project>