<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                       http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <groupId>bradleyross.pom-tutorials</groupId>
   <artifactId>pom-tutorials-parent</artifactId>
   <version>0.0.1-SNAPSHOT</version>   
   <packaging>pom</packaging>
   <modules>
      <module>tutorials-webapp1</module>
      <module>tutorials-common</module>
      <module>tutorials-launch</module>
      <module>tutorials-log4j2</module>
      <module>tutorials-log4j1</module>
      <module>tutorials-development</module>
   </modules>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>
<!-- 
  http://stackoverflow.com/questions/15886209/maven-is-not-working-in-java-8-when-javadoc-tags-are-incomplete   
  The Maven javadoc tool for Java 8 is very picky about correctly formed
  HTML tags.  This option turns off the checking for Java 8.
  
  In creating a range of versions, a square bracket means inclusive while
  a parenthesis means exclusive.
  [1.8,) means every version from 1.8 onward
  [1.8,1.9) means every version greater or equal to 1.8 and less than 1.9.
  
  Since I finally resolved the HTML problems in the Javadocs, I commented out
  the change.
  
  The Javadoc plugin in Mavn has the following parameters related to 
  linking between Javadoc directories: destDir, detectJavaApiLink,
  detectLinks, detectOfflineLinks.
  
  It appears that most of the problems with the Maven Javadoc Plugin were
  fixed by a later version of the JDK
  -->
<profiles>
	<profile>
		<id>doclint-java8-disable</id>
			<activation>
				<jdk>[1.8,)</jdk>
			</activation>
		<build>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>2.10.4</version>
					<configuration>
						<linksource>true</linksource>
						<quiet>true</quiet>
						<links>
							<link>https://docs.oracle.com/javase/8/docs/api/</link>
							<link>https://docs.oracle.com/javaee/6/api/</link>	
							<!-- http://www.slf4j.org/api/ -->
							<link>http://www.jfree.org/jfreechart/api/javadoc/</link>
							<link>http://www.jfree.org/jcommon/api/</link>
							<link>http://jackcess.sourceforge.net/apidocs/</link>
							<link>https://commons.apache.org/proper/commons-logging/apidocs/</link>							
							<link>https://logging.apache.org/log4j/2.x/log4j-api/apidocs/</link>
							<link>http://logging.apache.org/log4j/2.x/log4j-1.2-api/apidocs/</link>
						</links>
						<offlineLinks>
							<!-- This apparently means that package-list is in
							     the target/site/slf4j directory.  It has to be in that directory for
							     each module.
							     
							     For the slf4j Javadoc, the links work if I use offlineLink, but not if I use link.
							     When I did an internet search, it appeared that some web sites were not returning
							     files unless the HTTP headers contained an agent description.  That could be the problem 
							     in this case.
							-->						
							<offlineLink>
								<url>http://www.slf4j.org/api/</url>
								<location>../slf4j</location>
							</offlineLink>
						</offlineLinks>
						<!--  <additionalparam>-Xdoclint:none</additionalparam> --> 
					</configuration>
				</plugin>
			</plugins>
		</build>
	</profile>
	<profile>
		<id>prior versions</id>
		<activation>
			<jdk>(,1.7)</jdk>
		</activation>
		<build>
		<!-- 
			It appears that maven-javadoc-plugin:2.10.3 has a dependency on log4j-1.2.14
		 -->
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>2.10.4</version>
					<configuration>
						<linksource>true</linksource>
						<quiet>true</quiet>
						<links>
							<link>https://docs.oracle.com/javase/8/docs/api/</link>
							<link>https://docs.oracle.com/javaee/6/api/</link>						
							<!-- <link>http://www.slf4j.org/api/</link> -->
							<link>http://www.jfree.org/jfreechart/api/javadoc/</link>
							<link>http://www.jfree.org/jcommon/api/</link>
							<link>http://jackcess.sourceforge.net/apidocs/</link>
							<link>https://commons.apache.org/proper/commons-logging/apidocs/</link>
							<link>https://logging.apache.org/log4j/2.x/log4j-api/apidocs/</link>
							<link>http://logging.apache.org/log4j/2.x/log4j-1.2-api/apidocs/</link>
						</links>
						<offlineLinks>
							<!-- This apparently means that package-list is in
							     the target/site/slf4j directory.  It has to be in that directory for
							     each module.
							-->
							<offlineLink>
								<url>http://www.slf4j.org/api/</url>
								<location>../slf4j</location>
							</offlineLink>
						</offlineLinks>						
					</configuration>
				</plugin>
			</plugins>
		</build>
	</profile>
</profiles>

<!--  
   http://stackoverflow.com/questions/567996/can-maven-collect-all-the-dependent-jars-for-a-project-to-help-with-application 
   This option places copies of all of the jar files in the target directory.
-->
<build>
	<plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-dependency-plugin</artifactId>
			<version>2.10</version>
			<configuration>
				<quiet>true</quiet>
				<outputDirectory>
					${project.build.directory}/dependencies
				</outputDirectory>
			</configuration>
		</plugin>
		<plugin>
				<!-- 
				      Some of the J2EE technologies require JRE 1.6
				 -->
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
				</plugin>
		</plugins>
</build>
	<!-- 
		This dependency is required because the maven-javadoc-plugin:2.10.3 has
		a dependency on maven-core:2.2.1, which has direct or indirect
		dependencies on slf4j-nop:1.5.3 and slf4j-jdk14:1.5.6.
		
		maven-core:2.2.1 : slf4j-jdk14:1.5.6
		maven-core:2.2.1 : wagon-webdav-jackrabbit:1.0-beta-6 : slf4j-nop:1.5.3
		
		These dependencies caused conflicts when dealing with various logging
		schemes that used different jar files.
		
		By inserting a dependency on maven-core:3.3.9, it forces the system
		to use maven-core:3.3.9 instead of maven-core:2.2.1.  
	 -->
	<dependencies>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-core</artifactId>
			<version>3.3.9</version>
		</dependency>
	</dependencies>
</project>