<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>groupId</groupId>
    <artifactId>PlanOMart</artifactId>
    <version>1.0-SNAPSHOT</version>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>8</source>
                    <target>8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.4</version>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>3.4</version>
                <configuration>
                    <skipEmptyReport>false</skipEmptyReport>
                    <rulesets>
                        <ruleset>

                        <description>PMD Rules configuration for Universal Composable Visualizer</description>

                        <!--
                         * Collection of good practices that should be followed.
                         -->
                        <rule ref="rulesets/java/basic.xml/JumbledIncrementer" />
                        <rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop" />
                        <rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode" />
                        <rule ref="rulesets/java/basic.xml/DoubleCheckedLocking" />
                        <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock" />
                        <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement" />
                        <rule ref="rulesets/java/basic.xml/BooleanInstantiation" />
                        <rule ref="rulesets/java/basic.xml/CollapsibleIfStatements" />
                        <rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray" />
                        <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor" />
                        <rule ref="rulesets/java/basic.xml/MisplacedNullCheck" />
                        <rule ref="rulesets/java/basic.xml/AvoidThreadGroup" />
                        <rule ref="rulesets/java/basic.xml/BrokenNullCheck" />
                        <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation" />
                        <rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues" />
                        <rule ref="rulesets/java/basic.xml/AvoidUsingHardCodedIP" />
                        <rule ref="rulesets/java/basic.xml/CheckResultSet" />
                        <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators" />
                        <rule ref="rulesets/java/basic.xml/ExtendsObject" />
                        <rule ref="rulesets/java/basic.xml/CheckSkipResult" />
                        <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop" />
                        <rule ref="rulesets/java/basic.xml/DontCallThreadRun" />
                        <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices" />

                        <!--
                         * Rules that find questionable usages of the clone() method.
                         -->
                        <rule ref="rulesets/java/clone.xml/ProperCloneImplementation" />
                        <rule ref="rulesets/java/clone.xml/CloneThrowsCloneNotSupportedException" />
                        <rule ref="rulesets/java/clone.xml/CloneMethodMustImplementCloneable" />

                        <!--
                         * Rules that find problems related to code size or complexity.
                         -->
                        <!-- <rule ref="rulesets/java/codesize.xml/ExcessiveMethodLength" /> -->
                        <!-- <rule ref="rulesets/java/codesize.xml/ExcessiveParameterList" /> -->
                        <!-- <rule ref="rulesets/java/codesize.xml/ExcessiveClassLength" /> -->
                        <!-- <rule ref="rulesets/java/codesize.xml/CyclomaticComplexity" /> -->

                        <!--
                         * Rules that are considered controversial.
                         -->
                        <rule ref="rulesets/java/controversial.xml/AssignmentInOperand">
                            <properties>
                                <property name="allowFor" value="true" />
                                <property name="allowWhile" value="true" />
                            </properties>
                        </rule>
                        <rule ref="rulesets/java/controversial.xml/DontImportSun" />
                        <rule ref="rulesets/java/controversial.xml/AvoidAccessibilityAlteration" />
                        <rule ref="rulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly" />
                        <rule ref="rulesets/java/controversial.xml/OneDeclarationPerLine" />
                        <!-- <rule ref="rulesets/java/controversial.xml/AvoidPrefixingMethodParameters" /> -->

                        <!--
                         * Rules that find instances of high or inappropriate coupling between objects and packages.
                         -->
                        <rule ref="rulesets/java/coupling.xml/LooseCoupling" />

                        <!--
                         * Rules that flag suboptimal code implementations.
                         -->
                        <rule ref="rulesets/java/design.xml/UseUtilityClass" />
                        <!-- <rule ref="rulesets/java/design.xml/SimplifyBooleanReturns" /> -->
                        <rule ref="rulesets/java/design.xml/SimplifyBooleanExpressions" />
                        <rule ref="rulesets/java/design.xml/SwitchStmtsShouldHaveDefault" />
                        <!-- <rule ref="rulesets/java/design.xml/AvoidDeeplyNestedIfStmts" /> -->
                        <!-- <rule ref="rulesets/java/design.xml/AvoidReassigningParameters" /> -->
                        <rule ref="rulesets/java/design.xml/SwitchDensity" />
                        <rule ref="rulesets/java/design.xml/ConstructorCallsOverridableMethod" />
                        <!-- <rule ref="rulesets/java/design.xml/AccessorClassGeneration" /> -->
                        <rule ref="rulesets/java/design.xml/FinalFieldCouldBeStatic" />
                        <!-- <rule ref="rulesets/java/design.xml/CloseResource" /> -->
                        <rule ref="rulesets/java/design.xml/NonStaticInitializer" />
                        <rule ref="rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt" />
                        <rule ref="rulesets/java/design.xml/NonCaseLabelInSwitchStatement" />
                        <!-- <rule ref="rulesets/java/design.xml/OptimizableToArrayCall" /> -->
                        <rule ref="rulesets/java/design.xml/BadComparison" />
                        <rule ref="rulesets/java/design.xml/EqualsNull" />
                        <!-- <rule ref="rulesets/java/design.xml/ConfusingTernary" /> -->
                        <rule ref="rulesets/java/design.xml/InstantiationToGetClass" />
                        <rule ref="rulesets/java/design.xml/IdempotentOperations" />
                        <!-- <rule ref="rulesets/java/design.xml/SimpleDateFormatNeedsLocale" /> -->
                        <rule ref="rulesets/java/design.xml/ImmutableField" />
                        <!-- <rule ref="rulesets/java/design.xml/UseLocaleWithCaseConversions" /> -->
                        <!-- <rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass" /> -->
                        <rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic" />
                        <rule ref="rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass" />
                        <!-- <rule ref="rulesets/java/design.xml/AvoidSynchronizedAtMethodLevel" /> -->
                        <rule ref="rulesets/java/design.xml/MissingBreakInSwitch" />
                        <rule ref="rulesets/java/design.xml/UseNotifyAllInsteadOfNotify" />
                        <rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause" />
                        <rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod" />
                        <rule ref="rulesets/java/design.xml/SimplifyConditional" />
                        <!-- Busted in PMD 5.3.2 - re-enable in 5.3.3 -->
                        <!-- <rule ref="rulesets/java/design.xml/CompareObjectsWithEquals" /> -->
                        <!-- <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons" /> -->
                        <!-- <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInCaseInsensitiveComparisons" /> -->
                        <!-- <rule ref="rulesets/java/design.xml/UnnecessaryLocalBeforeReturn" /> -->
                        <rule ref="rulesets/java/design.xml/NonThreadSafeSingleton" />
                        <rule ref="rulesets/java/design.xml/UncommentedEmptyMethodBody" />
                        <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor" />
                        <rule ref="rulesets/java/design.xml/AvoidConstantsInterface" />
                        <rule ref="rulesets/java/design.xml/UnsynchronizedStaticDateFormatter" />
                        <rule ref="rulesets/java/design.xml/PreserveStackTrace" />
                        <rule ref="rulesets/java/design.xml/UseCollectionIsEmpty" />
                        <rule ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal" />
                        <!-- <rule ref="rulesets/java/design.xml/EmptyMethodsInAbstractClassShouldBeAbstract" /> -->
                        <rule ref="rulesets/java/design.xml/SingularField" />
                        <rule ref="rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull" />
                        <rule ref="rulesets/java/design.xml/AbstractClassWithoutAnyMethod" />
                        <!-- <rule ref="rulesets/java/design.xml/TooFewBranchesForASwitchStatement" /> -->
                        <rule ref="rulesets/java/design.xml/LogicInversion" />
                        <!-- We have a large number of methods that take two arrays.  In such scenarios, this check does not make sense -->
                        <!-- <rule ref="rulesets/java/design.xml/UseVarargs" /> -->
                        <!-- Too many false positives - re-enable in PMD 5.3.3 -->
                        <!-- <rule ref="rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass" /> -->
                        <rule ref="rulesets/java/design.xml/AvoidProtectedMethodInFinalClassNotExtending" />

                        <!--
                         * Rules that find empty statements of any kind.
                         -->
                        <rule ref="rulesets/java/empty.xml/EmptyCatchBlock" />
                        <rule ref="rulesets/java/empty.xml/EmptyIfStmt" />
                        <rule ref="rulesets/java/empty.xml/EmptyWhileStmt" />
                        <rule ref="rulesets/java/empty.xml/EmptyTryBlock" />
                        <rule ref="rulesets/java/empty.xml/EmptyFinallyBlock" />
                        <rule ref="rulesets/java/empty.xml/EmptySwitchStatements" />
                        <rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock" />
                        <rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop" />
                        <rule ref="rulesets/java/empty.xml/EmptyInitializer" />
                        <rule ref="rulesets/java/empty.xml/EmptyStatementBlock" />
                        <rule ref="rulesets/java/empty.xml/EmptyStaticInitializer" />

                        <!--
                         * Rules that deal with different problems that can occur with finalizers.
                         -->
                        <rule ref="rulesets/java/finalizers.xml/EmptyFinalizer" />
                        <rule ref="rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize" />
                        <rule ref="rulesets/java/finalizers.xml/FinalizeOverloaded" />
                        <rule ref="rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize" />
                        <rule ref="rulesets/java/finalizers.xml/FinalizeShouldBeProtected" />
                        <rule ref="rulesets/java/finalizers.xml/AvoidCallingFinalize" />

                        <!--
                         * Rules that deal with different problems that can occur with import statements.
                         -->
                        <rule ref="rulesets/java/imports.xml/DuplicateImports" />
                        <rule ref="rulesets/java/imports.xml/DontImportJavaLang" />
                        <rule ref="rulesets/java/imports.xml/UnusedImports" />
                        <rule ref="rulesets/java/imports.xml/ImportFromSamePackage" />
                        <rule ref="rulesets/java/imports.xml/UnnecessaryFullyQualifiedName" />

                        <!--
                         * Rules that catch questionable usages of loggers.
                         -->
                        <rule ref="rulesets/java/logging-java.xml/MoreThanOneLogger" />
                        <!-- <rule ref="rulesets/java/logging-java.xml/LoggerIsNotStaticFinal" /> -->
                        <rule ref="rulesets/java/logging-java.xml/SystemPrintln" />
                        <rule ref="rulesets/java/logging-java.xml/AvoidPrintStackTrace" />

                        <!--
                         * Rules for migrating.
                         -->
                        <rule ref="rulesets/java/migrating.xml/ReplaceVectorWithList" />
                        <rule ref="rulesets/java/migrating.xml/ReplaceHashtableWithMap" />
                        <rule ref="rulesets/java/migrating.xml/ReplaceEnumerationWithIterator" />

                        <!--
                         * Rules regarding preferred usage of names and identifiers.
                         -->
                        <!-- <rule ref="rulesets/java/naming.xml/ShortVariable" /> -->
                        <!-- <rule ref="rulesets/java/naming.xml/LongVariable" /> -->
                        <!-- <rule ref="rulesets/java/naming.xml/ShortMethodName" /> -->
                        <!-- <rule ref="rulesets/java/naming.xml/VariableNamingConventions" /> -->
                        <!-- <rule ref="rulesets/java/naming.xml/MethodNamingConventions" /> -->
                        <!-- <rule ref="rulesets/java/naming.xml/ClassNamingConventions" /> -->
                        <!-- <rule ref="rulesets/java/naming.xml/AbstractNaming" /> -->
                        <rule ref="rulesets/java/naming.xml/AvoidDollarSigns" />
                        <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass" />
                        <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName" />
                        <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName" />
                        <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName" />
                        <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName" />
                        <!-- <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName" /> -->
                        <rule ref="rulesets/java/naming.xml/NoPackage" />
                        <rule ref="rulesets/java/naming.xml/PackageCase" />
                        <rule ref="rulesets/java/naming.xml/MisleadingVariableName" />
                        <rule ref="rulesets/java/naming.xml/BooleanGetMethodName" />
                        <!-- <rule ref="rulesets/java/naming.xml/ShortClassName" /> -->
                        <rule ref="rulesets/java/naming.xml/GenericsNaming" />

                        <!--
                         * Rules that deal with different optimizations that generally apply to best practices.
                         -->
                        <rule ref="rulesets/java/optimizations.xml/LocalVariableCouldBeFinal" />
                        <rule ref="rulesets/java/optimizations.xml/MethodArgumentCouldBeFinal" />
                        <!-- <rule ref="rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops" /> -->
                        <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector" />
                        <!-- <rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith" /> -->
                        <rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends" />
                        <rule ref="rulesets/java/optimizations.xml/UseArraysAsList" />
                        <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops" />
                        <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation" />
                        <rule ref="rulesets/java/optimizations.xml/AddEmptyString" />
                        <!-- <rule ref="rulesets/java/optimizations.xml/RedundantFieldInitializer" /> -->
                        <rule ref="rulesets/java/optimizations.xml/PrematureDeclaration" />

                        <!--
                         * Strict guidelines for throwing and catching exceptions.
                         -->
                        <rule ref="rulesets/java/strictexception.xml/AvoidCatchingThrowable" />
                        <!-- <rule ref="rulesets/java/strictexception.xml/SignatureDeclaresThrowsException" /> -->
                        <rule ref="rulesets/java/strictexception.xml/ExceptionAsFlowControl" />
                        <rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE" />
                        <rule ref="rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes" />
                        <!-- <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNullPointerException" /> -->
                        <rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException" />
                        <rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError" />
                        <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException" />
                        <!-- <rule ref="rulesets/java/strictexception.xml/AvoidCatchingGenericException" /> -->
                        <rule ref="rulesets/java/strictexception.xml/AvoidLosingExceptionInformation" />

                        <!--
                         * Rules for manipulation of String, StringBuffer, and StringBuilder instances.
                         -->
                        <!-- <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals" /> -->
                        <rule ref="rulesets/java/strings.xml/StringInstantiation" />
                        <rule ref="rulesets/java/strings.xml/StringToString" />
                        <rule ref="rulesets/java/strings.xml/InefficientStringBuffering" />
                        <rule ref="rulesets/java/strings.xml/UnnecessaryCaseChange" />
                        <rule ref="rulesets/java/strings.xml/UseStringBufferLength" />
                        <!-- <rule ref="rulesets/java/strings.xml/AppendCharacterWithChar" /> -->
                        <!-- <rule ref="rulesets/java/strings.xml/ConsecutiveAppendsShouldReuse" /> -->
                        <!-- <rule ref="rulesets/java/strings.xml/ConsecutiveLiteralAppends" /> -->
                        <!-- <rule ref="rulesets/java/strings.xml/UseIndexOfChar" /> -->
                        <rule ref="rulesets/java/strings.xml/InefficientEmptyStringCheck" />
                        <!-- <rule ref="rulesets/java/strings.xml/InsufficientStringBufferDeclaration" /> -->
                        <rule ref="rulesets/java/strings.xml/UselessStringValueOf" />
                        <rule ref="rulesets/java/strings.xml/StringBufferInstantiationWithChar" />
                        <rule ref="rulesets/java/strings.xml/UseEqualsToCompareStrings" />
                        <rule ref="rulesets/java/strings.xml/AvoidStringBufferField" />

                        <!--
                         * Security guidelines from Sun.
                         -->
                        <rule ref="rulesets/java/sunsecure.xml/MethodReturnsInternalArray" />
                        <rule ref="rulesets/java/sunsecure.xml/ArrayIsStoredDirectly" />

                        <!--
                         * Rules for unnecessary code.
                         -->
                        <rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary" />
                        <rule ref="rulesets/java/unnecessary.xml/UnnecessaryReturn" />
                        <rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod" />
                        <rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable" />
                        <rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals" />
                        <!-- <rule ref="rulesets/java/unnecessary.xml/UselessParentheses" /> -->

                        <!--
                         * Rules that find unused or ineffective code.
                         -->
                        <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField" />
                        <rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable" />
                        <!-- Busted in PMD 5.3.2 - re-enable in 5.3.3 -->
                        <!-- <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod" /> -->
                        <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter" />
                        <!-- <rule ref="rulesets/java/unusedcode.xml/UnusedModifier" /> -->

                    </ruleset>

                    </rulesets>
                </configuration>
            </plugin>
    </plugins>
    </reporting>
    
</project>