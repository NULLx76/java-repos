<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.unifi</groupId>
	<artifactId>fatture</artifactId>
	<version>1.0</version>
	<packaging>jar</packaging>

	<name>fatture</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<jongo.version>1.3.0</jongo.version>
		<mongo.driver.version>2.14.3</mongo.driver.version>
		<docker.maven.plugin.version>0.17.2</docker.maven.plugin.version>

		<!-- For Unit tests -->
		<jacoco.data.file>${project.build.directory}/coverage-reports/jacoco.exec</jacoco.data.file>
		<jacoco.report.path>${project.reporting.outputDirectory}/jacoco-ut</jacoco.report.path>
		<!-- For Integration tests -->
		<jacoco.data.it.file>${project.build.directory}/coverage-reports/jacoco-it.exec</jacoco.data.it.file>
		<jacoco.report.it.path>${project.reporting.outputDirectory}/jacoco-it</jacoco.report.it.path>

		<sonar.language>java</sonar.language>
		<sonar.jacoco.reportPath>${jacoco.data.file}</sonar.jacoco.reportPath>
		<sonar.jacoco.itReportPath>${jacoco.data.it.file}</sonar.jacoco.itReportPath>

		<sonar.coverage.exclusions>**/Main.*, **/ObligatoryTextFieldListener.*</sonar.coverage.exclusions>
		
		<!-- For each rule to be ignore, add another eXX and two corresponding 
			properties with eXX in the name as below -->
		<sonar.issue.ignore.multicriteria>e11</sonar.issue.ignore.multicriteria>

		<!-- Disable rule for undocumented API (just an example) -->
		<sonar.issue.ignore.multicriteria.e11.ruleKey>squid:UndocumentedApi</sonar.issue.ignore.multicriteria.e11.ruleKey>
		<sonar.issue.ignore.multicriteria.e11.resourceKey>**/*.java</sonar.issue.ignore.multicriteria.e11.resourceKey>
	</properties>

	<dependencies>
	
	<!--  Used for both unit and integration tests -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>${mongo.driver.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jongo</groupId>
			<artifactId>jongo</artifactId>
			<version>${jongo.version}</version>
		</dependency>
		<dependency>
			<groupId>com.github.fakemongo</groupId>
			<artifactId>fongo</artifactId>
			<version>1.6.5</version>
		</dependency>

		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>testcontainers</artifactId>
			<version>1.1.7</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-swing-junit</artifactId>
			<version>3.6.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		<dependency>
			<groupId>org.apache.pdfbox</groupId>
			<artifactId>pdfbox</artifactId>
			<version>2.0.7</version>
		</dependency>

		<!-- Redis DB -->
		<dependency>
			<groupId>com.github.kstyrc</groupId>
			<artifactId>embedded-redis</artifactId>
			<version>0.6</version>
		</dependency>
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>2.9.0</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.5</version>
		</dependency>

		<!-- Spring data -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>2.9.4</version>
		</dependency>

		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.13</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-asm</artifactId>
			<version>3.1.4.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>5.0.3.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-redis</artifactId>
			<version>2.0.3.RELEASE</version>
		</dependency>
		
		<!-- END dependencies -->

	</dependencies>

	<build>
		<resources>
			<resource>
			<!-- We have to include spring-configuration.xml -->
				<filtering>false</filtering>
				<directory>resources</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
		</resources>
		<pluginManagement>
		<!--  Plugins used by the project -->
			<plugins>
				<plugin>
					<groupId>org.eluder.coveralls</groupId>
					<artifactId>coveralls-maven-plugin</artifactId>
					<version>4.3.0</version>
					<configuration>
						<jacocoReports>
							<jacocoReport>${jacoco.report.path}/jacoco.xml</jacocoReport>
						</jacocoReports>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.sonarsource.scanner.maven</groupId>
					<artifactId>sonar-mavenâ€“plugin</artifactId>
					<version>3.0.1</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
		<!--  END plugins -->
	</build>

	<profiles>
		<profile>
			<id>standard</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>0.7.7.201606060606</version>
						<configuration>
							<excludes>
								<exclude>**/Main.*</exclude>
								<exclude>**/ObligatoryTextFieldListener.*</exclude>
							</excludes>
						</configuration>
						<executions>
							<!-- Unit tests -->
							<execution>
								<id>jacoco-pre-unit-test</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${jacoco.data.file}</destFile>
									<propertyName>surefireArgLine</propertyName>
								</configuration>
							</execution>
							<execution>
								<id>jacoco-post-unit-test</id>
								<phase>test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<dataFile>${jacoco.data.file}</dataFile>
									<outputDirectory>${jacoco.report.path}</outputDirectory>
								</configuration>
							</execution>
							<!-- Integration tests -->
							<execution>
								<id>jacoco-pre-integration-test</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>prepare-agent-integration</goal>
								</goals>
								<configuration>
									<destFile>${jacoco.data.it.file}</destFile>
									<propertyName>failsafeArgLine</propertyName>
								</configuration>
							</execution>
							<execution>
								<id>jacoco-post-integration-test</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>report-integration</goal>
								</goals>
								<configuration>
									<dataFile>${jacoco.data.it.file}</dataFile>
									<outputDirectory>${jacoco.report.it.path}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.19.1</version>
						<configuration>
							<argLine>${surefireArgLine}</argLine>
						</configuration>
					</plugin>
					<!-- Used to create a single jar with all dependencies -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>2.4.3</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>shade</goal>
								</goals>
								<configuration>
									<shadedArtifactAttached>true</shadedArtifactAttached>
									<shadedClassifierName>all</shadedClassifierName>
									<transformers>
										<transformer
											implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
											<mainClass>com.unifi.fatture.app.Main</mainClass>
										</transformer>
									</transformers>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Used to build a (runnable) fatjar with dipendencies -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.5.0</version>
						<executions>
							<execution>
								<id>runJarWithDependencies</id>
								<phase>integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<skip>true</skip>
							<executable>java</executable>
							<arguments>
								<argument>-jar</argument>
								<argument>${project.build.directory}/${project.artifactId}-${project.version}-all.jar</argument>
							</arguments>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>2.19.1</version>
						<configuration>
							<argLine>${failsafeArgLine}</argLine>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- Docker container for mongo-project  -->
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.maven.plugin.version}</version>
						<configuration>
							<images>
								<image>
									<alias>${project.artifactId}</alias>
									<name>mongo</name>
									<run>
										<ports>
											<port>27017:27017</port>
										</ports>
									</run>
								</image>
								<image>
									<name>fatture-app</name>
									<build>
										<dockerFileDir>${project.basedir}/docker</dockerFileDir>
										<args>
											<fatjar>${project.artifactId}-${project.version}-all.jar</fatjar>
										</args>
										<assembly>
											<inline>
												<files>
													<file>
														<source>${project.build.directory}/${project.artifactId}-${project.version}-all.jar</source>
													</file>
												</files>
											</inline>
										</assembly>
									</build>
									<run>
										<!-- Links the project-image with the mongo image -->
										<links>
											<link>mongo:mongo-host</link>
										</links>
										<wait>
											<!-- Wait for the output "Fatture-app terminates" -->
											<time>10000</time>
											<log>Fatture-app terminates</log>
										</wait>
									</run>
								</image>
							</images>
							<showLogs>false</showLogs>
						</configuration>
						<executions>
							<execution>
								<id>docker:build</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:stop</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>second-db</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>0.7.7.201606060606</version>
						<configuration>
							<excludes>
								<exclude>**/Main.*</exclude>
								<exclude>**/ObligatoryTextFieldListener.*</exclude>
							</excludes>
						</configuration>
						<executions>
							<!-- For Unit tests -->
							<execution>
								<id>jacoco-pre-unit-test</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${jacoco.data.file}</destFile>
									<propertyName>surefireArgLine</propertyName>
								</configuration>
							</execution>
							<execution>
								<id>jacoco-post-unit-test</id>
								<phase>test</phase>
								<goals>
									<goal>report</goal>
								</goals>
								<configuration>
									<dataFile>${jacoco.data.file}</dataFile>
									<outputDirectory>${jacoco.report.path}</outputDirectory>
								</configuration>
							</execution>
							<!-- For Integration tests -->
							<execution>
								<id>jacoco-pre-integration-test</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>prepare-agent-integration</goal>
								</goals>
								<configuration>
									<destFile>${jacoco.data.it.file}</destFile>
									<propertyName>failsafeArgLine</propertyName>
								</configuration>
							</execution>
							<execution>
								<id>jacoco-post-integration-test</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>report-integration</goal>
								</goals>
								<configuration>
									<dataFile>${jacoco.data.it.file}</dataFile>
									<outputDirectory>${jacoco.report.it.path}</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.19.1</version>
						<configuration>
							<argLine>${surefireArgLine}</argLine>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-shade-plugin</artifactId>
						<version>2.4.3</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>shade</goal>
								</goals>
								<configuration>
									<shadedArtifactAttached>true</shadedArtifactAttached>
									<shadedClassifierName>all</shadedClassifierName>
									<transformers>
										<transformer
											implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
											<mainClass>com.unifi.fatture.app.Main</mainClass>
										</transformer>
									</transformers>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.5.0</version>
						<executions>
							<execution>
								<id>runJarWithDependencies</id>
								<phase>integration-test</phase>
								<goals>
									<goal>exec</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<skip>true</skip>
							<executable>java</executable>
							<arguments>
								<argument>-jar</argument>
								<argument>${project.build.directory}/${project.artifactId}-${project.version}-all.jar</argument>
							</arguments>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>2.19.1</version>
						<configuration>
							<argLine>${failsafeArgLine}</argLine>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- Docker container for redis-project  -->
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.maven.plugin.version}</version>
						<configuration>
							<images>
								<image>
									<alias>${project.artifactId}</alias>
									<name>redis</name>
									<run>
										<ports>
											<port>6379:6379</port>
										</ports>
									</run>
								</image>
								<image>
									<name>fatture-app</name>
									<build>
										<dockerFileDir>${project.basedir}/docker</dockerFileDir>
										<args>
											<fatjar>${project.artifactId}-${project.version}-all.jar</fatjar>
										</args>
										<assembly>
											<inline>
												<files>
													<file>
														<source>${project.build.directory}/${project.artifactId}-${project.version}-all.jar</source>
													</file>
												</files>
											</inline>
										</assembly>
									</build>
									<run>
									<!-- Links the project-image with the mongo image -->
										<links>
											<link>redis:redis-host</link>
										</links>
										<wait>
											<!-- Wait for the output "Fatture-app terminates" -->
											<time>10000</time>
											<log>Fatture-app terminates</log>
										</wait>
									</run>
								</image>
							</images>
							<showLogs>false</showLogs>
						</configuration>
						<executions>
							<execution>
								<id>docker:build</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>docker:stop</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Will be run after fatture-app's image has been built -->
			<id>docker-compose</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<skipTests>true</skipTests>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.maven.plugin.version}</version>
						<configuration>
							<images>
								<image>
									<alias>${project.artifactId}</alias>
									<external>
										<type>compose</type>
										<basedir>.</basedir>
									</external>
									<run>
										<wait>
											<!-- Wait for the output "Fatture-app terminates" -->
											<time>10000</time>
											<log>Fatture-app terminates</log>
										</wait>
									</run>
								</image>
							</images>
							<showLogs>false</showLogs>
						</configuration>
						<executions>
							<execution>
								<id>docker:start</id>
								<phase>verify</phase>
								<goals>
									<goal>start</goal>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
