<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>pcronos.integracao.fornecedor</groupId>
  <artifactId>integr-fornecedor</artifactId>
  <version>3.4.3</version>
  <name>Integrador de Sistemas com o Portal Cronos - para Empresas Fornecedoras</name>
  
  <properties>
    
<!-- O seguinte é necessário para evitar que Maven remove indevidamente "encoding/project=Cp1252" -->
<!-- no arquivo "org.eclipse.core.resources.prefs" -->
    <project.build.sourceEncoding>Cp1252</project.build.sourceEncoding>
<!--<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> -->

    <maven.build.timestamp.format>dd/MM/yyyy HH:mm</maven.build.timestamp.format>
    <pcronos.jre.ambiente_producao>C:\Program Files\Java\jre1.8.0_92</pcronos.jre.ambiente_producao>
  </properties>
  
  <repositories>
    <repository>
        <id>Remote-Maven-Repository-com-JDBC-Drivers</id>
        <url>https://raw.github.com/EricJoosse/Remote-Maven-Repository-com-JDBC-Drivers/mvn-repo/</url>
        <snapshots>
            <enabled>true</enabled>
            <updatePolicy>always</updatePolicy>
        </snapshots>
    </repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
    	<groupId>com.sun.jersey</groupId>
    	<artifactId>jersey-core</artifactId>
    	<version>1.12</version>
    </dependency>
    
    <dependency>
    	<groupId>com.sun.jersey</groupId>
    	<artifactId>jersey-bundle</artifactId>
    	<version>1.12</version>
    </dependency>
    
    <dependency>
    	<groupId>com.sun.jersey.contribs</groupId>
    	<artifactId>jersey-multipart</artifactId>
    	<version>1.12</version>
    </dependency>
    
    <dependency>
    	<groupId>oracle.jdbc</groupId>
    	<artifactId>jdbc-oracle</artifactId>
    	<version>10.2.0.5.0</version>
    </dependency>
    
    <dependency>
    	<groupId>org.firebirdsql.jdbc</groupId>
    	<artifactId>jaybird-full</artifactId>
    	<version>2.2.10</version>
    </dependency>
    
<!--     O seguinte dá runtime error ao executar "java -jar {sapjco3-path}/sapjco3.jar"  -->
<!--     que "sapjco3.jar não pode ser renomeado":  -->
<!--<dependency> -->
<!--   	<groupId>com.sap</groupId> -->
<!--   	<artifactId>jco-sap</artifactId> -->
<!--  	<version>3.0.17</version> -->
<!--</dependency> -->

    <dependency>
         <groupId>sapjco3</groupId>
         <artifactId>sapjco3</artifactId>
         <scope>system</scope>
         <version>3.0.17</version>
         <systemPath>C:\PCronos\PCronos Lib\lib\sapjco3.jar</systemPath>
    </dependency>
    
	<dependency>
	    <groupId>javax.mail</groupId>
	    <artifactId>mail</artifactId>
	    <version>1.5.0-b01</version>
	    <exclusions>
	    	<exclusion>
	    		<artifactId>activation</artifactId>
	    		<groupId>javax.activation</groupId>
	    	</exclusion>
	    </exclusions>
	</dependency>
	
	<dependency>
	    <groupId>com.microsoft.sqlserver</groupId>
	    <artifactId>mssql-jdbc</artifactId>
	    <version>6.2.2.jre8</version>
	</dependency>
	
	<dependency>
	    <groupId>org.json</groupId>
	    <artifactId>json</artifactId>
	    <version>20171018</version>
	</dependency>
	
	<dependency>
		<groupId>commons-codec</groupId>
		<artifactId>commons-codec</artifactId>
		<version>1.11</version>
	</dependency>
	
    <dependency>
		<groupId>com.github.vatbub</groupId>
		<artifactId>mslinks</artifactId>
		<version>1.0.4</version>
	</dependency>
	
	<dependency>
	   <groupId>org.mybatis</groupId>
	   <artifactId>mybatis</artifactId>
	   <version>3.4.5</version>
	</dependency>
	
	<dependency>
	    <groupId>org.hibernate</groupId>
	    <artifactId>hibernate-core</artifactId>
<!-- 	<version>3.3.0.SP1</version> -->
		<version>5.4.10.Final</version>
	</dependency>
	
	<!-- Java bean validation API - Especificação (interfaces): -->
	<dependency>
	    <groupId>javax.validation</groupId>
	    <artifactId>validation-api</artifactId>
	    <version>2.0.1.Final</version>
	</dependency>
	
	<!-- Hibernate validator - Implementação do Bean validation API: -->
	<dependency>
	    <groupId>org.hibernate</groupId>
	    <artifactId>hibernate-validator</artifactId>
<!--    <version>3.1.0.GA</version> -->
	    <version>6.1.1.Final</version>
	</dependency>
	
	<!-- Unified Expression Language - Especificação (interfaces): -->
	<dependency>
	    <groupId>javax.el</groupId>
	    <artifactId>javax.el-api</artifactId>
	    <version>3.0.1-b06</version>
	</dependency>
	
	<!-- Unified Expression Language - Implementação: -->
	<dependency>
	    <groupId>org.glassfish.web</groupId>
	    <artifactId>javax.el</artifactId>
	    <version>2.2.6</version>
	</dependency>	

	<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
	<dependency>
	    <groupId>org.apache.logging.log4j</groupId>
	    <artifactId>log4j-core</artifactId>
	    <version>2.13.3</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
	<dependency>
	    <groupId>org.apache.logging.log4j</groupId>
	    <artifactId>log4j-core</artifactId>
	    <version>2.13.3</version>
	</dependency>
  </dependencies>
  
  
  <build>
    <sourceDirectory>${project.basedir}/src</sourceDirectory>

    <plugins>

<!-- 1. Copiar templates para o Instalador, do subdiretório /templates/ para /tpl/: 
     2. Copiar resources para o Instalador, do subdiretório /res/       para /res/: -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>copia-templates</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
	          <outputDirectory>${project.basedir}/Instalador/Windows/Arquivos de Programas PC/Integração Fornecedor - Portal Cronos/tpl</outputDirectory>
              <resources>          
                <resource>
<!--              <directory>src/non-packaged-resources</directory> -->
                  <directory>${project.basedir}/templates</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
          <execution>
            <id>copia-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
	          <outputDirectory>${project.basedir}/Instalador/Windows/Arquivos de Programas PC/Integração Fornecedor - Portal Cronos/res</outputDirectory>
              <resources>          
                <resource>
<!--              <directory>src/non-packaged-resources</directory> -->
                  <directory>${project.basedir}/res</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
        </executions>
      </plugin>


      <!-- O Integrador de Sistemas com o Portal Cronos só compila com compatibilidade configurada para JDK 1.7 ou mais : -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.5.1</version>
        <configuration>
          <encoding>Cp1252</encoding>   <!-- Para evitar erro de compilação para todos os acentos Portugueses : "unmappable character for encoding UTF-8" -->
          <source>1.8</source>
          <target>1.8</target>
<!--      <fork>true</fork> -->     <!-- Isso dá um bug que gera lixo no arquivo .jar gerado. Tentar mais tarde novamente com uma versão nova do maven-compiler-plugin -->

<!--     O seguinte NÃO dá erro de opções inválidas de javac, porém não é o desejado : -->
<!--           <compilerArguments> -->
<!--             <verbose /> -->
<!--              Em todos os dezenas de  servidores de produção tem o jre1.8.0_92 instalado, então melhor compilar exatamente com esta versão de rt.jar -->
<!--             <bootclasspath>${java.home}\lib\rt.jar</bootclasspath> -->
<!--             <extdirs>${java.home}\lib\ext</extdirs> -->
<!--           </compilerArguments> -->

<!--       O seguinte é o desejado , porém dá erro de opções inválidas de javac : -->
<!--          <compilerArgument>"-verbose -bootclasspath ${java.home}\lib\rt.jar"</compilerArgument> -->
<!--          <compilerArgument>-verbose -bootclasspath "${java.home}\lib\rt.jar"</compilerArgument> -->
<!--          <compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument> -->

<!--             <bootclasspath>${java.home}..\jre1.8.0_92\lib\rt.jar</bootclasspath> -->
<!--             <extdirs>${java.home}..\jre1.8.0_92\lib\ext</extdirs> -->

<!--           O seguinte também dá erro de opções inválidas de javac : -->
<!-- 			 <compilerArgs> -->
<!-- 			<arg>-verbose</arg> -->
<!-- 			<arg>-bootclasspath "C:\Program Files\Java\jre1.8.0_92\lib\rt.jar"</arg> -->
<!-- 			<arg>-extdirs "C:\Program Files\Java\jre1.8.0_92\lib\ext"</arg> -->
<!-- 			</compilerArgs> -->

<!--           <compilerArguments> -->
<!--             <verbose /> -->
                       <!--  Em todos os dezenas de  servidores de produção tem o jre1.8.0_92 instalado, então melhor compilar exatamente com esta versão de rt.jar -->
<!--             <bootclasspath>"C:\Program Files\Java\jre1.8.0_92\lib\rt.jar"</bootclasspath> -->
<!--             <extdirs>"C:\Program Files\Java\jre1.8.0_92\lib\ext"</extdirs> -->
<!--           </compilerArguments> -->

<!--           <compilerArguments> -->
<!--             <verbose /> -->
<!--                         Em todos os dezenas de  servidores de produção tem o jre1.8.0_92 instalado, então melhor compilar exatamente com esta versão de rt.jar -->
<!--             <bootclasspath>"C:/Program Files/Java/jre1.8.0_92/lib/rt.jar"</bootclasspath> -->
<!--             <extdirs>"C:\Program Files\Java\jre1.8.0_92\lib\ext"</extdirs> -->
<!--           </compilerArguments> -->

<!--                  <compilerArgument>"-verbose -bootclasspath C:\Program Files\Java\jre1.8.0_92\lib\rt.jar -extdirs C:\Program Files\Java\jre1.8.0_92\lib\ext"</compilerArgument> -->
<!--                  <compilerArgument>'-verbose -bootclasspath "C:\Program Files\Java\jre1.8.0_92\lib\rt.jar" -extdirs "C:\Program Files\Java\jre1.8.0_92\lib\ext"'</compilerArgument> -->
<!--                  <compilerArgument>-verbose -bootclasspath C:\Program Files\Java\jre1.8.0_92\lib\rt.jar -extdirs C:\Program Files\Java\jre1.8.0_92\lib\ext</compilerArgument> -->
<!--                  <compilerArgument>-verbose -bootclasspath "C:\Program Files\Java\jre1.8.0_92\lib\rt.jar" -extdirs "C:\Program Files\Java\jre1.8.0_92\lib\ext"</compilerArgument> -->
<!--                  <compilerArgument>-verbose -bootclasspath "C:/Program Files/Java/jre1.8.0_92/lib/rt.jar" -extdirs "C:/Program Files/Java\jre1.8.0_92/lib/ext"</compilerArgument> -->

<!-- Apenas o seguinte funciona, finalmente :  -->
          <compilerArguments>
            <verbose />
<!--              Em todos os dezenas de  servidores de produção tem o jre1.8.0_92 instalado, então melhor compilar exatamente com esta versão de rt.jar -->
            <bootclasspath>${pcronos.jre.ambiente_producao}\lib\rt.jar:${pcronos.jre.ambiente_producao}\lib\jce.jar</bootclasspath>
            <extdirs>${pcronos.jre.ambiente_producao}\lib\ext</extdirs>
          </compilerArguments>

        </configuration>
      </plugin>
        

<!-- As seguintes 3 seções são necessárias para automatizar o deploy do nosso standalone Java Application (sem integração com Apache, Tomcat, etc) : -->
<!-- Veja o tutorial excelente no link http://www.javacreed.com/how-to-use-maven-with-an-application/) -->

<!-- 1. Copiar dependent jars para o Instalador, subdiretório /lib: -->
		<plugin>
		  <groupId>org.apache.maven.plugins</groupId>
		  <artifactId>maven-dependency-plugin</artifactId>
            <version>2.8</version>
		  <executions>
		    <execution>
		      <id>copy-dependencies</id>
		      <phase>prepare-package</phase>
		      <goals>
		        <goal>copy-dependencies</goal>
		      </goals>
		      <configuration>
<!-- 	        <outputDirectory>${project.build.directory}/lib</outputDirectory> -->
		        <outputDirectory>${project.basedir}/Instalador/Windows/Arquivos de Programas PC/Integração Fornecedor - Portal Cronos/lib</outputDirectory>
		        <overWriteReleases>false</overWriteReleases>
		        <overWriteSnapshots>false</overWriteSnapshots>
		        <overWriteIfNewer>true</overWriteIfNewer>
		        <includeScope>compile</includeScope>
<!-- 		    Exceto o seguinte, pois o "copy-dependencies" do maven-dependency-plugin -->
<!-- 		    faz uma cópia de "sapjco3.jar" para "sapjco3-3.0.17.jar" indevidamente: -->
		        <excludeArtifactIds>sapjco3</excludeArtifactIds>
<!--            Mais tarde copiar para 2 diretórios intermediários, uma vez com <stripversion>true</stripversion> -->
<!--            e outra vez com <stripversion>false</stripversion>  -->
<!--            e em seguinte usar o assembly-plugin:    -->
		      </configuration>
		    </execution>
		  </executions>
		</plugin>

<!-- 2.  Gerar o arquivo .jar no Instalador e adicionar dependent jars no Class-Path entry no Manifest file : -->
		<plugin>
		  <groupId>org.apache.maven.plugins</groupId>
		  <artifactId>maven-jar-plugin</artifactId>
            <version>2.4</version>   
                   <!--  A versão 3.0.2 gera "rt.jar" e "." na posição errada  -->
		  <configuration>
            <outputDirectory>${project.basedir}/Instalador/Windows/Arquivos de Programas PC/Integração Fornecedor - Portal Cronos</outputDirectory>
		    <archive>
		      
		      <!-- Não gerar META-INF/maven/${groupId}/${artifactId}/pom.xml e pom.properties : -->
		      <addMavenDescriptor>false</addMavenDescriptor>
		    
		      <manifest>
		        <packageName>pcronos.integracao.fornecedor</packageName>
<!--                 <addDefaultImplementationEntries>true</addDefaultImplementationEntries> -->
<!--                 <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries> -->
                <addClasspath>true</addClasspath>		        
		        <classpathPrefix>lib/</classpathPrefix>
		      </manifest>
		      
		      <manifestSections>
		          <manifestSection>
		            <name>Specification</name>
		            <manifestEntries>
				        <Specification-Title>Integrador Fornecedor - Portal Cronos</Specification-Title>
				        <Specification-Vendor>Cronos Technology, PE, Brasil</Specification-Vendor>
				        <Specification-Version>3.4.3</Specification-Version>
		            </manifestEntries>
		          </manifestSection>

		          <manifestSection>
		            <name>Implementation</name>
		            <manifestEntries>
				        <Implementation-Title>pcronos.integracao.fornecedor.IntegracaoFornecedorCompleta.class</Implementation-Title>
				        <Implementation-Version>3.4.3</Implementation-Version>
				        <Implementation-Vendor>eric.jo@bol.com.br</Implementation-Vendor>
				        <Jar-Name>integr-fornecedor-3.4.3.jar</Jar-Name>
		            </manifestEntries>
		          </manifestSection>

		      </manifestSections>

  		      <manifestEntries>
		        <Built-By>${user.name} Joosse -  eric.jo@bol.com.br (Portal Cronos)</Built-By>
		        <Build-Time>${maven.build.timestamp}</Build-Time>
<!-- 3. O seguinte concatena "rt.jar" e "." ANTES do Class-Path gerado automaticamente por Maven : -->
        <!-- <Class-Path>file:///C:/Program%20Files/Java/jre1.8.0_92/lib/rt.jar .</Class-Path> -->
   		        <Class-Path>. lib/sapjco3.jar</Class-Path>  <!-- rt.jar não precisa, pois rt.jar já está no bootclasspath do JVM -->
		     </manifestEntries>

		    </archive>
		  </configuration>
		</plugin>
    </plugins>
  </build>
</project>