<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>edu.fcmd</groupId>
	<artifactId>madcap-database</artifactId>
	<name>madcap-processing</name>
	<version>0.0.1-SNAPSHOT</version>
	<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
	<dependencies>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.41</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1</version>
		</dependency>
		<!-- JOOQ SQL Connector -->
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq</artifactId>
			<version>3.9.2</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-meta</artifactId>
			<version>3.9.2</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-codegen</artifactId>
			<version>3.9.2</version>
		</dependency>
		<!-- logger -->
		<!-- https://mvnrepository.com/artifact/log4j/log4j -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>

		<!-- junit testing dependency -->
		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>

		<dependency>
			<!-- jsoup HTML parser library @ https://jsoup.org/ -->
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.10.3</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<version>3.9.2</version>
				<!-- The plugin should hook into the generate goal -->
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>mysql</groupId>
						<artifactId>mysql-connector-java</artifactId>
						<version>5.1.41</version>
					</dependency>
				</dependencies>
				<configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.9.2.xsd">
					<!-- Configure the database connection here -->
					<jdbc>
						<driver>com.mysql.jdbc.Driver</driver>
						<url>jdbc:mysql://localhost:3306/madcap_p</url>
						<user></user>
						<password></password>
					</jdbc>

					<generator>
						<!-- The default code generator. You can override this one, to generate 
							your own code style. Supported generators: - org.jooq.util.JavaGenerator 
							- org.jooq.util.ScalaGenerator Defaults to org.jooq.util.JavaGenerator -->
						<name>org.jooq.util.JavaGenerator</name>

						<database>
							<!-- The database type. The format here is: org.util.[database].[database]Database -->
							<name>org.jooq.util.mysql.MySQLDatabase</name>

							<!-- The database schema (or in the absence of schema support, in 
								your RDBMS this can be the owner, user, database name) to be generated -->
							<inputSchema>madcap_p</inputSchema>

							<!-- All elements that are generated from your schema (A Java regular 
								expression. Use the pipe to separate several expressions) Watch out for case-sensitivity. 
								Depending on your database, this might be important! -->
							<includes>.*</includes>

							<!-- All elements that are excluded from your schema (A Java regular 
								expression. Use the pipe to separate several expressions). Excludes match 
								before includes, i.e. excludes have a higher priority -->
							<excludes></excludes>
						</database>

						<target>
							<!-- The destination package of your generated classes (within the 
								destination directory) -->
							<packageName>edu.generated.rel</packageName>

							<!-- The destination directory of your generated classes. Using Maven 
								directory layout here -->
							<directory>src/main/java
							</directory>
						</target>
					</generator>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>