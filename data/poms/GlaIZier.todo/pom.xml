<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ru.glaizier</groupId>
    <artifactId>todo</artifactId>
    <version>2.0</version>
    <description>Todo list application</description>
    <packaging>war</packaging>

    <properties>
        <jdk.version>1.8</jdk.version>
        <spring.version>4.3.6.RELEASE</spring.version>
        <spring-security.version>4.2.1.RELEASE</spring-security.version>
    </properties>
    <profiles>
        <profile>
            <id>memory</id>
            <properties>
                <profile.name>memory</profile.name>
                <spring.profiles.active>memory</spring.profiles.active>
                <npm.profile>dev</npm.profile>
                <glaizier.server>127.0.0.1</glaizier.server>
                <glaizier.tomcat.path>${project.name}</glaizier.tomcat.path>
                <glaizier.tomcat.port>8080</glaizier.tomcat.port>
            </properties>
        </profile>
        <profile>
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <profile.name>default</profile.name>
                <spring.profiles.active>default</spring.profiles.active>
                <npm.profile>dev</npm.profile>
                <glaizier.server>127.0.0.1</glaizier.server>
                <glaizier.tomcat.path>${project.name}</glaizier.tomcat.path>
                <glaizier.tomcat.port>8080</glaizier.tomcat.port>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <profile.name>prod</profile.name>
                <spring.profiles.active>prod</spring.profiles.active>
                <npm.profile>prod</npm.profile>
                <glaizier.server>127.0.0.1</glaizier.server>
                <glaizier.tomcat.path>${project.name}</glaizier.tomcat.path>
                <glaizier.tomcat.port>8080</glaizier.tomcat.port>
            </properties>
        </profile>
        <profile>
            <id>prod-docker</id>
            <properties>
                <profile.name>prod-docker</profile.name>
                <spring.profiles.active>prod</spring.profiles.active>
                <npm.profile>prod</npm.profile>
                <glaizier.server>127.0.0.1</glaizier.server>
                <glaizier.tomcat.path>${project.name}</glaizier.tomcat.path>
                <glaizier.tomcat.port>8080</glaizier.tomcat.port>
            </properties>
        </profile>
    </profiles>

    <build>
        <!-- Enable placeholders for maven and property file-->
        <filters>
            <filter>${project.basedir}/src/main/resources/profiles/${profile.name}.properties</filter>
        </filters>
        <finalName>${project.name}</finalName>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.1</version>
                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                    <!--Controls whether annotation processing and/or compilation is done. -proc:none means that
                    compilation takes place without annotation processing. -proc:only means that only annotation
                    processing is done, without any subsequent compilation.-->
                    <!--Can't use -proc:none because we use lombok that generate code using annotations-->
                    <!--<compilerArgument>-proc:none</compilerArgument>-->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <goal>war:war</goal>
                    <!-- Don't need it because of the java config usage instead -->
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>

            <!--Tomcat deploy and run plugin-->
            <plugin>
                <groupId>org.apache.tomcat.maven</groupId>
                <artifactId>tomcat7-maven-plugin</artifactId>
                <version>2.2</version>
                <configuration>
                    <!-- Enable spring profile by setting spring.profiles.active in system var while using tomcat7 plugin for tomcat7:run
                        or use mvn clean tomcat7:run -Dspring.profiles.active=<profile> instead of it-->
                    <systemProperties>
                        <spring.profiles.active>${spring.profiles.active}</spring.profiles.active>
                    </systemProperties>
                    <!--http config-->
                    <server>${glaizier.server}</server>
                    <url>http://${glaizier.server}:${glaizier.tomcat.port}/manager/text</url>
                    <path>/${glaizier.tomcat.path}</path>
                    <!--https config-->
                    <httpsPort>8443</httpsPort>
                    <!--Store in target-->
                    <keystoreFile>${project.build.directory}/tomcat7.keystore</keystoreFile>
                    <keystorePass>password</keystorePass>
                </configuration>
            </plugin>

            <!--Create keys for tomcat plugin needed for https-->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>keytool-maven-plugin</artifactId>
                <version>1.5</version>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <id>clean</id>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                    <execution>
                        <phase>generate-resources</phase>
                        <id>genkey</id>
                        <goals>
                            <goal>generateKeyPair</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <keystore>${project.build.directory}/tomcat7.keystore</keystore>
                    <dname>cn=localhost</dname>
                    <keypass>password</keypass>
                    <storepass>password</storepass>
                    <alias>tomcat7</alias>
                    <keyalg>RSA</keyalg>
                    <keysize>2048</keysize>
                </configuration>
            </plugin>

            <!-- We have different profiles (properties files or environments). In RootConfig we ask to use
            environment.properties file in classpath to inject values from there into classes. So using this plugin
            we copy and rename current enabled maven profile (-P <name-of-profile> key in mvn command) to
            environment.properties for Spring-->
            <plugin>
                <groupId>com.coderplus.maven.plugins</groupId>
                <artifactId>copy-rename-maven-plugin</artifactId>
                <version>1.0.1</version>
                <executions>
                    <execution>
                        <id>copy-file</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <sourceFile>
                                ${project.build.outputDirectory}/profiles/${profile.name}.properties
                            </sourceFile>
                            <destinationFile>
                                ${project.build.outputDirectory}/profiles/environment.properties
                            </destinationFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Enable spring profile by setting spring.profiles.active in system var while using mvn from command line-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.20.1</version>
                <configuration>
                    <systemPropertyVariables>
                        <spring.profiles.active>${spring.profiles.active}</spring.profiles.active>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>1.6</version>
                <configuration>
                    <workingDirectory>js/</workingDirectory>
                    <installDirectory>js/</installDirectory>
                    <nodeVersion>v8.9.1</nodeVersion>
                </configuration>
                <executions>
                    <execution>
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                    </execution>
                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <arguments>install</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>npm build spa js bundle</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <arguments>run build:${npm.profile}</arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- Spring data -->
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>1.11.3.RELEASE</version>
        </dependency>
        <!-- Aspects  -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!--All security configs-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <!-- Need for AbstractSecurityWebApplicationInitializer-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${spring-security.version}</version>
        </dependency>


        <!-- compile only, when deployed container provide this -->
        <!-- MvcWebAppInitializer depends on servlet api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- Jpa provider. Also include Java EE JPA2.1 api. Need for JPA Spring Data work. -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.2.10.Final</version>
        </dependency>
        <!-- Mvc validation: @Valid... -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>5.4.1.Final</version>
        </dependency>
        <!-- Embedded db for local development -->
        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>2.4.0</version>
        </dependency>
        <!-- Postgresql driver -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.4.1212</version>
        </dependency>
        <!-- Hicari. The fastest db connection pool -->
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>2.7.1</version>
        </dependency>


        <!-- Views-->
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf</artifactId>
            <version>3.0.3.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring4</artifactId>
            <version>3.0.3.RELEASE</version>
        </dependency>
        <!--Need this in order to use conditional /logout link when user has been authenticated-->
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity4</artifactId>
            <version>3.0.1.RELEASE</version>
        </dependency>

        <!-- Rest controller -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.8.7</version>
        </dependency>
        <!-- Rest api docs -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.7.0</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.7.0</version>
        </dependency>


        <!-- Jwt token Java implementation for api security -->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!-- Getter, setter, builder... generation. We don't need this dependency in result jar so provided-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.16</version>
            <scope>provided</scope>
        </dependency>

        <!-- Loggers -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.25</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>
        <!-- Enable spring logs because spring uses apache commons logging-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>1.7.25</version>
        </dependency>

        <!--Test-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <!-- Need to test spring app itself and security particularly -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <version>${spring-security.version}</version>
            <scope>test</scope>
        </dependency>
        <!--greaterThan matchers-->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>1.3</version>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.10.19</version>
            <scope>test</scope>
        </dependency>
        <!-- @SpyBean -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>1.5.4.RELEASE</version>
            <scope>test</scope>
        </dependency>

        <!--@Valid in Spring Mvc tests doesn't work without it. Maybe it's because hibernate validator waits
        this dependency to be provided by container. So we need to attach it manually for tests
        https://stackoverflow.com/questions/24049480/spring-mockmvc-doesnt-consider-validation-in-my-test -->
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>javax.el</artifactId>
            <version>3.0.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>