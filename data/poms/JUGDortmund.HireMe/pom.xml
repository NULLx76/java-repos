<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <artifactId>hireme</artifactId>
    <packaging>war</packaging>
    <groupId>de.maredit</groupId>
    <version>1.1.0-SNAPSHOT</version>
    <scm>
        <connection>scm:git:ssh://git@stash.maredit.net:7999/com/hireme.git</connection>
        <developerConnection>scm:git:ssh://git@stash.maredit.net:7999/com/hireme.git
        </developerConnection>
        <url>http://stash.maredit.net/projects/COM/repos/hireme/browse</url>
        <tag>hireme-1.0.0</tag>
    </scm>

    <distributionManagement>
        <repository>
            <id>nexus</id>
            <name>Internal Releases</name>
            <url>http://nexus.maredit.net/content/repositories/releases/</url>
        </repository>
        <snapshotRepository>
            <id>nexus</id>
            <name>Internal Snapshots</name>
            <url>http://nexus.maredit.net/content/repositories/snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <prerequisites>
        <maven>3.1.0</maven>
    </prerequisites>

    <properties>
        <ninja.version>5.1.0</ninja.version>
        <jetty.version>9.2.10.v20150310</jetty.version>
        <doxia-markdown.version>1.6</doxia-markdown.version>
        <maven-war-plugin.version>2.6</maven-war-plugin.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <usermanual.sourceDirectory>${basedir}/src/usermanual</usermanual.sourceDirectory>
        <operationmanual.sourceDirectory>${basedir}/src/operationmanual</operationmanual.sourceDirectory>
        <operationmanual.filename>operationmanual</operationmanual.filename>
        <operationmanual.outputDirectory>${project.build.outputDirectory}/assets/operationmanual
        </operationmanual.outputDirectory>
        <environment.config.sourceDirectory>${basedir}/src/env</environment.config.sourceDirectory>
    </properties>

    <build>
        <plugins>
            <!-- Plugin for extraction of git properties. Used to display build information inside the application -->
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.1.13</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                    <prefix>git</prefix>
                    <dateFormat>dd.MM.yyyy '@' HH:mm:ss z</dateFormat>
                    <verbose>true</verbose>
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <generateGitPropertiesFilename>src/main/java/conf/git.properties
                    </generateGitPropertiesFilename>
                    <format>properties</format>
                    <skipPoms>true</skipPoms>
                    <injectAllReactorProjects>false</injectAllReactorProjects>
                    <failOnNoGitDirectory>true</failOnNoGitDirectory>
                    <failOnUnableToExtractRepoInfo>true</failOnUnableToExtractRepoInfo>
                    <skip>false</skip>
                    <runOnlyOnce>false</runOnlyOnce>
                    <excludeProperties>
                        <!-- <excludeProperty>git.user.*</excludeProperty> -->
                    </excludeProperties>
                    <useNativeGit>false</useNativeGit>
                    <abbrevLength>7</abbrevLength>
                    <gitDescribe>
                        <skip>false</skip>
                        <always>false</always>
                        <abbrev>7</abbrev>
                        <dirty>-dirty</dirty>
                        <match>*</match>
                        <forceLongFormat>false</forceLongFormat>
                    </gitDescribe>
                </configuration>
            </plugin>
            <!-- Plugin for building releases via release:prepare|perform.
                 Plugin is loaded by maven by default, but we need to define a specific git provider version to fix issues in the interaction with git.
                 For details see:
                 https://jira.codehaus.org/browse/MRELEASE-812
                 http://stackoverflow.com/questions/15166781/mvn-releaseprepare-not-committing-changes-to-pom-xml
             -->
            <plugin>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.1</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.scm</groupId>
                        <artifactId>maven-scm-provider-gitexe</artifactId>
                        <version>1.9.4</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!-- Plugin is defined explicitly to set java version to 1.8 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <!-- Plugin inserted by ninja framework by default. Prevents inclusion of commons-logging via maven. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.3.1</version>
                <executions>
                    <execution>
                        <id>enforce-banned-dependencies</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <bannedDependencies>
                                    <excludes>
                                        <exclude>commons-logging</exclude>
                                    </excludes>
                                </bannedDependencies>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin inserted by ninja framework by default -->
            <plugin>
                <groupId>org.mortbay.jetty</groupId>
                <artifactId>maven-jetty-plugin</artifactId>
                <version>6.1.26</version>
                <configuration>
                    <stopKey>stop</stopKey>
                    <stopPort>8889</stopPort>
                    <scanIntervalSeconds>1</scanIntervalSeconds>
                    <reload>automatic</reload>
                    <contextPath>/</contextPath>
                    <scanTargetPatterns>
                        <scanTargetPattern>
                            <directory>${project.build.outputDirectory}</directory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                            <excludes>
                                <exclude>*/*.html</exclude>
                                <exclude>assets/**</exclude>
                                <exclude>app/**</exclude>
                            </excludes>
                        </scanTargetPattern>
                    </scanTargetPatterns>
                    <systemProperties>
                        <systemProperty>
                            <name>ninja.mode</name>
                            <value>dev</value>
                        </systemProperty>
                    </systemProperties>
                </configuration>
                <executions>
                    <execution>
                        <id>start-jetty</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <systemProperties>
                                <systemProperty>
                                    <name>ninja.mode</name>
                                    <value>prod</value>
                                </systemProperty>
                            </systemProperties>
                            <skip>${skip.protractor.tests}</skip>
                            <scanIntervalSeconds>0</scanIntervalSeconds>
                            <daemon>true</daemon>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-jetty</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <configuration>
                            <skip>${skip.protractor.tests}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Allows you to run Ninja via the SuperDevMode. -->
            <!-- run "mvn ninja:run" on the command line for the best -->
            <!-- development experience. -->
            <plugin>
                <groupId>org.ninjaframework</groupId>
                <artifactId>ninja-maven-plugin</artifactId>
                <version>${ninja.version}</version>
                <configuration>
                    <useDefaultExcludes>true</useDefaultExcludes>
                    <excludes>
                        <exclude>(.*)/app/(.*)</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- Plugin inserted by ninja framework per default -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>2.8.2</version>
            </plugin>
            <!-- Plugin inserted by ninja framework per default. Used for building standalone jar file -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <archive>
                        <manifest>
                            <mainClass>ninja.standalone.NinjaJetty</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!-- Plugin to install and run node, npm, karma, protractor and gulp. Used for testing and building of resources -->
            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <version>0.0.23</version>
                <executions>
                    <execution>
                        <id>install node and npm</id>
                        <goals>
                            <goal>install-node-and-npm</goal>
                        </goals>
                        <configuration>
                            <nodeVersion>v0.12.2</nodeVersion>
                            <npmVersion>1.3.8</npmVersion>
                        </configuration>
                    </execution>
                    <execution>
                        <id>npm install</id>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>npm update webdriver</id>
                        <phase>
                            integration-test
                        </phase>
                        <goals>
                            <goal>npm</goal>
                        </goals>
                        <configuration>
                            <arguments>run protractor</arguments>
                            <skip>${skip.protractor.tests}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>javascript tests</id>
                        <goals>
                            <goal>karma</goal>
                        </goals>
                        <configuration>
                            <karmaConfPath>${basedir}/src/test/javascript/conf/karma.ci.conf.js</karmaConfPath>
                            <skip>${skip.protractor.tests}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>gulp build</id>
                        <goals>
                            <goal>gulp</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin used for extraction of javascript files out of webjars, so that they can be used in protractor tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.8</version>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <configuration>
                            <includes>**/*.js</includes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin to deploy the application to a remote jetty container. Used for deployment on different systems. -->
            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven2-plugin</artifactId>
                <version>1.4.14</version>
                <configuration>
                    <container>
                        <containerId>jetty9x</containerId>
                        <type>remote</type>
                    </container>

                    <configuration>
                        <type>runtime</type>
                        <properties>
                            <cargo.hostname>${cargo.hostname}</cargo.hostname>
                            <cargo.servlet.port>8080</cargo.servlet.port>
                        </properties>
                    </configuration>

                    <deployer>
                        <type>remote</type>
                    </deployer>

                    <deployables>
                        <deployable>
                            <groupId>de.maredit</groupId>
                            <artifactId>hireme</artifactId>
                            <classifier>${cargo.artifact.classifier}</classifier>
                            <pingURL>http://${cargo.hostname}:8080</pingURL>
                            <type>war</type>
                            <properties>
                                <context>/</context>
                            </properties>
                        </deployable>
                    </deployables>
                </configuration>
            </plugin>
            <!-- Plugin for generation of unit test reports -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <skip>${skip.unit.tests}</skip>
                    <forkCount>3</forkCount>
                    <reuseForks>true</reuseForks>
                    <includes>
                        <include>/unit/**</include>
                    </includes>
                    <excludes>
                        <exclude>/doctester/**</exclude>
                        <exclude>/integration/**</exclude>
                        <exclude>**.js</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- Plugin for generation of integration test reports -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <skip>${skip.integration.tests}</skip>
                    <includes>
                        <include>/doctester/**</include>
                        <include>/integration/**</include>
                    </includes>
                    <excludes>
                        <exclude>/unit/**</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>verify</goal>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin for copying environment specific application and logging configuration to target directory -->
            <plugin>
                <groupId>com.coderplus.maven.plugins</groupId>
                <artifactId>copy-rename-maven-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>copy application.conf</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <sourceFile>${environment.config.sourceDirectory}/${env.name}/conf/application.conf
                            </sourceFile>
                            <destinationFile>${project.build.outputDirectory}/conf/application.conf</destinationFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy logback.xml</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <sourceFile>${environment.config.sourceDirectory}/${env.name}/logback.xml</sourceFile>
                            <destinationFile>${project.build.outputDirectory}/logback.xml</destinationFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- Plugin for building environment specific deployment artifacts -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven-war-plugin.version}</version>
                <configuration>
                    <classifier>dev</classifier>
                    <webappDirectory>${project.build.directory}/${project.build.finalName}-dev</webappDirectory>
                    <webResources>
                        <resource>
                            <directory>${environment.config.sourceDirectory}/dev</directory>
                            <targetPath>WEB-INF/classes</targetPath>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
        </resources>
        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            org.apache.maven.plugins
                                        </groupId>
                                        <artifactId>
                                            maven-dependency-plugin
                                        </artifactId>
                                        <versionRange>
                                            [2.8,)
                                        </versionRange>
                                        <goals>
                                            <goal>
                                                unpack-dependencies
                                            </goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <execute />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
    <dependencies>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>3.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery</artifactId>
            <version>2.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>angularjs</artifactId>
            <version>1.3.8</version>
        </dependency>
        <dependency>
            <groupId>org.webjars.bower</groupId>
            <artifactId>angular-route</artifactId>
            <version>1.3.15</version>
        </dependency>
        <dependency>
            <groupId>org.webjars.bower</groupId>
            <artifactId>adminlte</artifactId>
            <version>2.0.5</version>
        </dependency>
        <dependency>
            <groupId>org.webjars.bower</groupId>
            <artifactId>restangular</artifactId>
            <version>1.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.webjars.bower</groupId>
            <artifactId>lodash</artifactId>
            <version>3.7.0</version>
        </dependency>
        <dependency>
            <groupId>org.webjars.bower</groupId>
            <artifactId>angular-scroll</artifactId>
            <version>0.7.0</version>
        </dependency>
        <dependency>
            <groupId>org.webjars.bower</groupId>
            <artifactId>ng-tags-input</artifactId>
            <version>2.3.0</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>underscorejs</artifactId>
            <version>1.8.3</version>
        </dependency>
				<dependency>
				  <groupId>org.webjars.bower</groupId>
				  <artifactId>ng-file-upload</artifactId>
				  <version>4.2.0</version>
				</dependency>
				<dependency>
					<groupId>org.webjars</groupId>
					<artifactId>font-awesome</artifactId>
					<version>4.3.0-2</version>
				</dependency>
				<dependency>
					<groupId>org.webjars</groupId>
					<artifactId>ionicons</artifactId>
					<version>2.0.1</version>
				</dependency>
				<dependency>
				  <groupId>org.webjars</groupId>
				  <artifactId>angular-ui-bootstrap</artifactId>
				  <version>0.13.0</version>
				</dependency>
				<dependency>
				  <groupId>org.webjars.bower</groupId>
				  <artifactId>angular-i18n</artifactId>
				  <version>1.3.15</version>
				</dependency>
				<dependency>
					<groupId>org.imgscalr</groupId>
					<artifactId>imgscalr-lib</artifactId>
					<version>4.2</version>
				</dependency>
        <!-- If you want to deploy to a war please -->
        <!-- comment ninja-standalone dependency and  -->
        <!-- uncomment the dependency for ninja-servlet -->
        <dependency>
            <groupId>org.ninjaframework</groupId>
            <artifactId>ninja-servlet</artifactId>
            <version>${ninja.version}</version>
        </dependency>
        <!--<dependency>-->
        <!--<groupId>org.ninjaframework</groupId>-->
        <!--<artifactId>ninja-standalone</artifactId>-->
        <!--<version>${ninja.version}</version>-->
        <!--</dependency>-->
        <dependency>
            <groupId>org.ninjaframework</groupId>
            <artifactId>ninja-jaxy-routes</artifactId>
            <version>${ninja.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mongodb.morphia</groupId>
            <artifactId>morphia</artifactId>
            <version>0.111</version>
        </dependency>
        <dependency>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>jsp-2.1</artifactId>
            <version>6.0.0</version>
        </dependency>
        <dependency>
            <groupId>com.codepoetics</groupId>
            <artifactId>protonpack</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.5.3</version>
        </dependency>
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections-maven</artifactId>
            <version>0.9.8</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>18.0</version>
        </dependency>
        <dependency>
            <groupId>org.xhtmlrenderer</groupId>
            <artifactId>flying-saucer-pdf</artifactId>
            <version>9.0.7</version>
        </dependency>
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>pdfbox</artifactId>
            <version>1.8.9</version>
            <exclusions>
                <exclusion>
                    <artifactId>commons-logging</artifactId>
                    <groupId>commons-logging</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.ninjaframework</groupId>
            <artifactId>ninja-test-utilities</artifactId>
            <version>${ninja.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.github.fakemongo</groupId>
            <artifactId>fongo</artifactId>
            <version>1.5.7</version>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>1.7.1</version>
            <scope>test</scope>
        </dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
  			<groupId>org.webjars.bower</groupId>
  			<artifactId>ngDialog</artifactId>
  			<version>0.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>textAngular</artifactId>
			<version>1.4.1</version>
		</dependency>
		<dependency>
			<groupId>org.webjars.bower</groupId>
			<artifactId>rangy</artifactId>
			<version>1.3.0</version>
		</dependency>	
    </dependencies>
    <profiles>
        <!--Environment profile for development -->
        <profile>
            <id>env-dev</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <build.profile.id>env-dev</build.profile.id>
                <env.name>dev</env.name>
                <!-- only run unit tests to speed up building during development -->
                <skip.protractor.tests>true</skip.protractor.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <skip.unit.tests>false</skip.unit.tests>
            </properties>
        </profile>
        <!--Environment profile for jenkins -->
        <profile>
            <id>env-jenkins</id>
            <properties>
                <build.profile.id>env-jenkins</build.profile.id>
                <env.name>jenkins</env.name>
                <!-- ensure all tests are run as we use this on ci jobs -->
                <skip.protractor.tests>false</skip.protractor.tests>
                <skip.integration.tests>false</skip.integration.tests>
                <skip.unit.tests>false</skip.unit.tests>
            </properties>
        </profile>
        <!--Environment profile for build -->
        <profile>
            <id>env-build</id>
            <properties>
                <build.profile.id>env-build</build.profile.id>
                <env.name>build</env.name>
                <!-- ensure all tests are skipped as they would run on build database -->
                <skip.protractor.tests>true</skip.protractor.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <skip.unit.tests>true</skip.unit.tests>
            </properties>
        </profile>
        <!--Environment profile for prod -->
        <profile>
            <id>env-prod</id>
            <properties>
                <build.profile.id>env-prod</build.profile.id>
                <env.name>prod</env.name>
                <!-- ensure all tests are skipped as they would run on prod database -->
                <skip.protractor.tests>true</skip.protractor.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <skip.unit.tests>true</skip.unit.tests>
            </properties>
        </profile>
        <!-- Test profile for running no tests -->
        <profile>
            <id>tests-none</id>
            <properties>
                <build.profile.id>tests-none</build.profile.id>
                <skip.protractor.tests>true</skip.protractor.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <skip.unit.tests>true</skip.unit.tests>
            </properties>
        </profile>
        <!-- Test profile for unit tests -->
        <profile>
            <id>tests-unit</id>
            <properties>
                <build.profile.id>tests-unit</build.profile.id>
                <skip.protractor.tests>true</skip.protractor.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <skip.unit.tests>false</skip.unit.tests>
            </properties>
        </profile>
        <!-- Test profile for integration tests -->
        <profile>
            <id>tests-integration</id>
            <properties>
                <build.profile.id>tests-integration</build.profile.id>
                <skip.protractor.tests>true</skip.protractor.tests>
                <skip.integration.tests>false</skip.integration.tests>
                <skip.unit.tests>false</skip.unit.tests>
            </properties>
        </profile>
        <!-- Test profile for protractor/selenium tests -->
        <profile>
            <id>tests-protractor</id>
            <properties>
                <build.profile.id>tests-protractor</build.profile.id>
                <skip.protractor.tests>false</skip.protractor.tests>
                <skip.integration.tests>true</skip.integration.tests>
                <skip.unit.tests>false</skip.unit.tests>
            </properties>
        </profile>
        <!-- Test profile for running all tests -->
        <profile>
            <id>tests-all</id>
            <properties>
                <build.profile.id>tests-all</build.profile.id>
                <skip.protractor.tests>false</skip.protractor.tests>
                <skip.integration.tests>false</skip.integration.tests>
                <skip.unit.tests>false</skip.unit.tests>
            </properties>
        </profile>
        <!-- Profile for deployment on build system via cargo plugin -->
        <profile>
            <id>system-build</id>
            <properties>
                <cargo.hostname>hireme-build.maredit.net</cargo.hostname>
                <cargo.artifact.classifier>build</cargo.artifact.classifier>
            </properties>
        </profile>
        <!-- Profile for deployment on prod system via cargo plugin -->
        <profile>
            <id>system-prod</id>
            <properties>
                <cargo.hostname>hireme-prod.maredit.net</cargo.hostname>
                <cargo.artifact.classifier>prod</cargo.artifact.classifier>
            </properties>
        </profile>
        <!-- Profile for building manuals -->
        <profile>
            <id>build-manuals</id>
            <properties>
                <build.profile.id>build-manuals</build.profile.id>
            </properties>
            <build>
                <plugins>
                    <!-- Plugin for generation of user manual as website -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-site-plugin</artifactId>
                        <version>3.4</version>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.maven.doxia</groupId>
                                <artifactId>doxia-module-markdown</artifactId>
                                <version>${doxia-markdown.version}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <generateReports>false</generateReports>
                            <generateProjectInfo>false</generateProjectInfo>
                            <siteDirectory>${usermanual.sourceDirectory}</siteDirectory>
                            <templateDirectory>${usermanual.sourceDirectory}</templateDirectory>
                            <outputDirectory>${project.build.outputDirectory}/assets/usermanual</outputDirectory>
                        </configuration>
                        <executions>
                            <execution>
                                <id>package-usermanual</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>site</goal>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Plugin for generation of operation documentation as pdf -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-pdf-plugin</artifactId>
                        <version>1.3</version>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.maven.doxia</groupId>
                                <artifactId>doxia-module-markdown</artifactId>
                                <version>${doxia-markdown.version}</version>
                            </dependency>
                        </dependencies>
                        <configuration>
                            <generateReports>false</generateReports>
                            <generateProjectInfo>false</generateProjectInfo>
                            <siteDirectory>${operationmanual.sourceDirectory}</siteDirectory>
                            <templateDirectory>${operationmanual.sourceDirectory}</templateDirectory>
                            <outputDirectory>${operationmanual.outputDirectory}</outputDirectory>
                            <docDescriptor>${operationmanual.sourceDirectory}/pdf.xml</docDescriptor>
                        </configuration>
                        <executions>
                            <execution>
                                <id>package-operationmanual</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>pdf</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Plugin for attaching operation manual as separate artifact during
                        deployment -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>1.9.1</version>
                        <executions>
                            <execution>
                                <id>attach-operationmanual</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>attach-artifact</goal>
                                </goals>
                                <configuration>
                                    <artifacts>
                                        <artifact>
                                            <file>${operationmanual.outputDirectory}/${operationmanual.filename}.pdf
                                            </file>
                                            <type>pdf</type>
                                            <classifier>operationmanual</classifier>
                                        </artifact>
                                    </artifacts>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Profile for building environment specific deployment artifacts -->
        <profile>
            <id>build-deployment-artifacts</id>
            <properties>
                <build.profile.id>build-deployment-artifacts</build.profile.id>
            </properties>
            <build>
                <plugins>
                    <!-- Plugin for building environment specific deployment artifacts -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>${maven-war-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>package-build</id>
                                <phase>package</phase>
                                <configuration>
                                    <classifier>build</classifier>
                                    <webappDirectory>${project.build.directory}/${project.build.finalName}-build
                                    </webappDirectory>
                                    <webResources>
                                        <resource>
                                            <directory>${environment.config.sourceDirectory}/build</directory>
                                            <targetPath>WEB-INF/classes</targetPath>
                                        </resource>
                                    </webResources>
                                </configuration>
                                <goals>
                                    <goal>war</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>package-prod</id>
                                <phase>package</phase>
                                <configuration>
                                    <classifier>prod</classifier>
                                    <webappDirectory>${project.build.directory}/${project.build.finalName}-prod
                                    </webappDirectory>
                                    <webResources>
                                        <resource>
                                            <directory>${environment.config.sourceDirectory}/prod</directory>
                                            <targetPath>WEB-INF/classes</targetPath>
                                        </resource>
                                    </webResources>
                                </configuration>
                                <goals>
                                    <goal>war</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
