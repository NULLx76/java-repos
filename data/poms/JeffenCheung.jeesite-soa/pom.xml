<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.pactera.jeesite</groupId>
		<artifactId>aggregator</artifactId>
		<version>0.0.1</version>
		<relativePath>../aggregator</relativePath>
	</parent>
	
	<artifactId>jeesite-soa</artifactId>
	<version>${pactera.jeesite.version}</version>
	<packaging>war</packaging>

	<name>jeesite-soa</name>
	<url>http://jeffencheung.github.com/jeesite-soa</url>
	<description>jeesite的服务模块工程，提供RESTful服务。 </description>

	<!-- 
		1、这个工程的packaging类型是war，而不是jar。
			但是最终它不会独立打出war包来，其src/main/webapp里的所有文件，
			都会被最外围的web-dist工程聚合成一个总的war 
		2、这个工程的WEB-INF目录下，没有web.xml（有也没用，最终会被覆盖）。
			默认情况下，packaging类型为war的项目，如果没有web.xml，则构建会失败，
			因此需要在pom里做一个failOnMissingWebXml配置
		3、【普通的模块】除了jeesite-common工程无额外依赖，
			直接packagingExcludes过滤所有jar
		4、【服务模块】有自主依赖jeesite-common之外的jar的模块，
			通过packagingIncludes过滤打包非共通的jar，
			注意！引入WEB-INF/classes和views等本模块的文件夹
	 -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<packagingExcludes>
						WEB-INF/lib/spring*.jar,
						WEB-INF/lib/junit*.jar,
						
						WEB-INF/lib/*slf4j*.jar,
						WEB-INF/lib/*log4j*.jar,
						
						WEB-INF/lib/hamcrest-core*.jar,
						WEB-INF/lib/cxf-api*.jar,
						WEB-INF/lib/woodstox-core-asl*.jar,
						WEB-INF/lib/stax2-api*.jar,
						WEB-INF/lib/xmlschema-core*.jar,
						WEB-INF/lib/geronimo-javamail*.jar,
						WEB-INF/lib/wsdl4j*.jar,
						WEB-INF/lib/cxf-rt-core*.jar,
						WEB-INF/lib/jaxb-impl*.jar,
						WEB-INF/lib/cxf-rt-frontend-jaxrs*.jar,
						WEB-INF/lib/javax.ws.rs-api*.jar,
						WEB-INF/lib/cxf-rt-rs-extension-providers*.jar,
						WEB-INF/lib/cxf-rt-transports-http*.jar,
						WEB-INF/lib/stax-api*.jar
						
					</packagingExcludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
	
		<!--继承父模块的jar包
			主要目的是本war包打包所有jeesite-common的lib，
			减少各modules不必要的重复overlay common的lib的时间。 -->
		<dependency>
			<groupId>${pactera.jeesite.groupId}</groupId>
			<artifactId>jeesite-common</artifactId>
		</dependency>
		
		<!-- LOGGING begin -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- common-logging 实际调用slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- java.util.logging 实际调用slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- LOGGING end -->
		
		<!-- Spring begin -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- Spring end -->
		
		<!-- TEST begin -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- TEST end -->
		
		<!-- cxf需要jar包 -->
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxws</artifactId>
			<version>${cxf.version}</version>
		</dependency>
		
		<!-- json的一个读写类库 -->
		<dependency>
			<groupId>org.codehaus.jettison</groupId>
			<artifactId>jettison</artifactId>
			<version>${jettison.vsesion}</version>
		</dependency>
		
		<!-- restful, build by jeesite-common(if without aggregated, open it.)
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>jsr311-api</artifactId>
			<version>${rs.version}</version>
		</dependency>
		-->

		<!-- jackson -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jaxb-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>${jackson.version}</version>
			<!-- Jackson2.2.0 版本对于 CXF2.7.3 不支持 -->
		</dependency>

		<!-- inject依赖注入的jar文件应该可以去掉 -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>${inject.version}</version>
		</dependency>
	</dependencies>
</project>