<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.phantom</groupId>
  <artifactId>phantom-util</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>phantom-util</name>
  <url>http://maven.apache.org</url>

  <parent>
      <groupId>com.phantom</groupId>
      <artifactId>phantom-parent</artifactId>
      <version>1.0.0-SNAPSHOT</version>
      <relativePath>../phantom-parent</relativePath>
  </parent>

<!--  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    &lt;!&ndash; 忽略test 开启maven-compiler-plugin 中配置无效&ndash;&gt;
    &lt;!&ndash;<maven.test.skip>true</maven.test.skip>&ndash;&gt;
    &lt;!&ndash; 忽略javadoc &ndash;&gt;
    &lt;!&ndash;<maven.javadoc.skip>true</maven.javadoc.skip>&ndash;&gt;
  </properties>-->

  <!-- 本地仓库位置   开始 -->
  <!--<repositories>
    <repository>
      <id>maven-repo</id>
      <url>file:D:\\setup\\maven\\apache-maven-3.1.0\\repository</url>
    </repository>
  </repositories>-->
  <!-- 本地仓库位置   结束 -->

  <dependencies>
      <dependency>
          <groupId>com.phantom</groupId>
          <artifactId>phantom-common</artifactId>
          <version>1.0.0-SNAPSHOT</version>
      </dependency>

    <!-- 中文转拼音    开始-->

    <!-- 使用pinyin4j方式 -->
    <dependency>
        <groupId>com.belerweb</groupId>
        <artifactId>pinyin4j</artifactId>
        <version>2.5.0</version>
    </dependency>

    <!-- 使用jpinyin方式 -->
    <dependency>
        <groupId>com.github.stuxuhai</groupId>
        <artifactId>jpinyin</artifactId>
        <version>1.1.8</version>
    </dependency>
    <!-- 中文转拼音    结束-->

    <!-- https://mvnrepository.com/artifact/net.lingala.zip4j/zip4j -->
    <!-- ZIP文件压缩与解压缩 支持密码保护   开始-->
    <dependency>
        <groupId>net.lingala.zip4j</groupId>
        <artifactId>zip4j</artifactId>
        <version>1.3.2</version>
    </dependency>
    <!-- ZIP文件压缩与解压缩 支持密码保护   结束-->

    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
    </dependency>

  </dependencies>

  <distributionManagement>
      <repository>
          <id>internal.repo</id>
          <name>Temporary Staging Repository</name>
          <url>file://${project.build.directory}/mvn-repo</url>
      </repository>
  </distributionManagement>

  <build>
      <finalName>${project.name}-${project.version}</finalName>
      <plugins>
          <!-- jacoco代码覆盖率报告生成工具 开始-->
        <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>0.7.6.201602180812</version>
            <configuration>
                <destFile>${basedir}/target/coverage-reports/jacoco-unit.exec</destFile>
                <dataFile>${basedir}/target/coverage-reports/jacoco-unit.exec</dataFile>
            </configuration>
            <executions>
                <execution>
                    <id>jacoco-initialize</id>
                    <goals>
                        <goal>prepare-agent</goal>
                    </goals>
                </execution>
                <execution>
                    <id>jacoco-site</id>
                    <phase>test</phase>
                    <goals>
                        <goal>report</goal>
                    </goals>
                </execution>
            </executions>
        </plugin>
        <!-- jacoco代码覆盖率报告生成工具 结束-->

        <!-- 编译插件   开始 -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
                <skip>false</skip>
            </configuration>
        </plugin>
        <!-- 编译插件   结束 -->

        <!-- 打包时将依赖包一起打包  依赖包会被解压形式一起打包 开始-->
        <!--<plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>1.4</version>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>shade</goal>
              </goals>
              <configuration>
                <transformers>
                  <transformer
                          implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                    <resource>META-INF/spring.handlers</resource>
                  </transformer>
                  <transformer
                          implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                    &lt;!&ndash;<mainClass>com.chenzhou.examples.Main</mainClass>&ndash;&gt;
                  </transformer>
                  <transformer
                          implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                    <resource>META-INF/spring.schemas</resource>
                  </transformer>
                </transformers>
              </configuration>
            </execution>
          </executions>
        </plugin>-->
        <!-- 打包时将依赖包一起打包  依赖包会被解压形式一起打包  结束-->

        <!-- 打包时将依赖包一起打包  不压缩依赖包，将第三方包放在lib目录下  开始-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>2.4</version>
          <!-- The configuration of the plugin -->
          <configuration>
            <!-- Specifies the configuration file of the assembly plugin -->
                <descriptors>
                    <descriptor>src/main/assembly/package.xml</descriptor>
                </descriptors>
          </configuration>
          <executions>
            <execution>
              <id>make-assembly</id>
              <phase>package</phase>
              <goals>
                <goal>single</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <!-- 打包时将依赖包一起打包  不压缩依赖包，将第三方包放在lib目录下  结束-->

    </plugins>
  </build>
</project>
