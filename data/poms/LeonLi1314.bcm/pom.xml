<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.rtmap.traffic</groupId>
	<artifactId>bcm</artifactId>
	<packaging>war</packaging>
	<version>1.0.0-SNAPSHOT</version>

	<properties>
		<!-- 编译依赖，proivided -->
		<servlet.version>3.1.0</servlet.version>
		<jstl.version>1.2</jstl.version>

		<!-- 解决maven编译打包时输出乱码 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss</maven.build.timestamp.format>
		<timestamp>${maven.build.timestamp}</timestamp>
		<file.encoding>UTF-8</file.encoding>
		<java.version>1.8</java.version>

		<!-- maven 插件 -->
		<maven.compiler.plugin.version>3.2</maven.compiler.plugin.version>
		<maven.resources.plugin.version>2.7</maven.resources.plugin.version>
		<maven.javadoc.plugin.version>2.10.1</maven.javadoc.plugin.version>
		<maven.surefire.plugin.version>2.18</maven.surefire.plugin.version>
		<springext-plugin-version>1.2</springext-plugin-version>

		<!-- spring -->
		<aopalliance.version>1.0</aopalliance.version>
		<spring.version>4.1.7.RELEASE</spring.version>
		<spring.security.version>4.0.3.RELEASE</spring.security.version>

		<!-- shiro安全框架 -->
		<org.apache.shiro.version>1.2.4</org.apache.shiro.version>

		<!-- 数据库 -->
		<druid.version>1.0.16</druid.version>
		<mysql.connector.java.version>5.1.30</mysql.connector.java.version>

		<mybatis.version>3.3.0</mybatis.version>
		<mybatis.spring.version>1.2.3</mybatis.spring.version>

		<!-- json解析插件 -->
		<fastjson.version>1.2.7</fastjson.version>
		<jackson.version>1.9.13</jackson.version>
		<!-- 缓存 -->
		<ehcache.version>2.10.0</ehcache.version>
		<!-- 日志组件 -->
		<!-- <log4j.version>1.2.17</log4j.version> -->
		<slf4j.version>1.7.13</slf4j.version>
		<logback.version>1.1.3</logback.version>

		<!--test -->
		<junit.version>4.12</junit.version>
	</properties>

	<dependencies>
		<!-- servlet环境，编译依赖的组件，运行时由容器提供 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${servlet.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
			<scope>provided</scope>
		</dependency>

<!--         <dependency> -->
<!--             <groupId>taglibs</groupId> -->
<!--             <artifactId>standard</artifactId> -->
<!--             <version>1.1.2</version> -->
<!--         </dependency> -->
		<!-- commons -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- spring-aspects：提供对AspectJ的支持，以便可以方便的将面向方面的功能集成进IDE中，比如Eclipse AJDT。 -->
		<!-- spring-core：包含spring 框架基本的核心工具类,spring 其它组件要都要使用到这个包里的类，外部依赖Commons 
			Logging， (Log4J)。 -->
		<!-- spring-beans：所有应用都要用到的,包含访问配置文件、创建和管理bean 以及进行 IOC/DI操作相关的所有类。如果应用只需基本的IOC/DI 
			支持，引入spring-core.jar 及spring-beans.jar 文件就可以。 -->
		<!-- spring-aop：包含在应用中使用Spring 的AOP 特性时所需的类和源码级元数据支持。使用基于AOP 的Spring特性，如声明型事务管理。 -->
		<!-- spring-context：为Spring 核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI 
			所需的全部类，instrumentation组件以及校验Validation 方面的相关类。外部依赖spring-beans, (spring-aop)。 -->
		<!-- spring-dao:这个jar 文件包含Spring DAO、Spring Transaction 进行数据访问的所有类。为了使用声明型事务支持，还需在自己的应用里包含spring-aop.jar。外部依赖spring-core，(spring-aop， 
			spring-context， JTA API)。 -->
		<!-- spring-jdbc:这个jar 文件包含对Spring 对JDBC 数据访问进行封装的所有类。外部依赖spring-beans，spring-dao。 -->
		<!-- spring-support:包含支持UI模版（Velocity，FreeMarker，JasperReports），邮件服务，脚本服务(JRuby)，缓存Cache（EHCache），任务计划Scheduling（uartz）方面的类。外部依赖spring-context, 
			(spring-jdbc, Velocity, FreeMarker, JasperReports, BSH, Groovy, JRuby, Quartz, 
			EHCache) -->
		<!-- spring-web:包含Web 应用开发时，用到Spring 框架时所需的核心类，包括自动载入Web Application Context 
			特性的类、Struts 与JSF 集成类、文件上传的支持类、Filter 类和大量工具辅助类。 外部依赖spring-context, Servlet 
			API, (JSP API, JSTL, Commons FileUpload, COS)。 -->
		<!--spring-webmvc:包含Spring MVC 框架相关的所有类。包括框架的Servlets，Web MVC框架，控制器和视图支持。当然，如果你的应用使用了独立的MVC 
			框架，则无需这个JAR 文件里的任何类。外部依赖spring-web, (spring-support，Tiles，iText，POI)。 -->
		<!-- spring-portlet：spring自己实现的一个类似Spring MVC的框架。包括一个MVC框架和控制器。外部依赖spring-web， 
			Portlet API，(spring-webmvc)。 -->
		<dependency>
			<groupId>aopalliance</groupId>
			<artifactId>aopalliance</artifactId>
			<version>${aopalliance.version}</version>
		</dependency>
		<!-- <dependency> -->
		<!-- <groupId>org.aspectj</groupId> -->
		<!-- <artifactId>aspectjrt</artifactId> -->
		<!-- <version>1.6.9</version> -->
		<!-- </dependency> -->
		<!-- <dependency> -->
		<!-- <groupId>aspectj</groupId> -->
		<!-- <artifactId>aspectjweaver</artifactId> -->
		<!-- <version>1.5.4</version> -->
		<!-- </dependency> -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- Spring Security -->
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.security</groupId> -->
		<!-- <artifactId>spring-security-core</artifactId> -->
		<!-- <version>${spring.security.version}</version> -->
		<!-- </dependency> -->
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.security</groupId> -->
		<!-- <artifactId>spring-security-web</artifactId> -->
		<!-- <version>${spring.security.version}</version> -->
		<!-- </dependency> -->
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.security</groupId> -->
		<!-- <artifactId>spring-security-config</artifactId> -->
		<!-- <version>${spring.security.version}</version> -->
		<!-- </dependency> -->

		<!-- 导入Mysql数据库链接jar包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.connector.java.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- alibaba数据库连接池 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>${druid.version}</version>
		</dependency>
		<!-- dbcp数据库连接池 -->
		<!-- <dependency> -->
		<!-- <groupId>commons-dbcp</groupId> -->
		<!-- <artifactId>commons-dbcp</artifactId> -->
		<!-- <version>1.2.2</version> -->
		<!-- </dependency> -->

		<!-- mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis.spring.version}</version>
		</dependency>

		<!-- fastjson -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>

		<!-- JSTL标签类 -->
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<!-- 日志文件管理包 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- 桥接器，用于桥接commons-logging 到 slf4j，如果直接使用slf4j+logback的方案则无需此jar。 -->
		<!-- <dependency> -->
		<!-- <groupId>org.slf4j</groupId> -->
		<!-- <artifactId>jcl-over-slf4j</artifactId> -->
		<!-- <version>${slf4j.version}</version> -->
		<!-- </dependency> -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>org.logback-extensions</groupId>
			<artifactId>logback-ext-spring</artifactId>
			<version>0.1.2</version>
		</dependency>

		<!-- 缓存 -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
			<version>${ehcache.version}</version>
		</dependency>

		<!-- shiro安全框架 -->
		<!-- <dependency> -->
		<!-- <groupId>org.apache.shiro</groupId> -->
		<!-- <artifactId>shiro-core</artifactId> -->
		<!-- <version>${org.apache.shiro.version}</version> -->
		<!-- </dependency> -->
		<!-- <dependency> -->
		<!-- <groupId>org.apache.shiro</groupId> -->
		<!-- <artifactId>shiro-web</artifactId> -->
		<!-- <version>${org.apache.shiro.version}</version> -->
		<!-- </dependency> -->
		<!-- <dependency> -->
		<!-- <groupId>org.apache.shiro</groupId> -->
		<!-- <artifactId>shiro-ehcache</artifactId> -->
		<!-- <version>${org.apache.shiro.version}</version> -->
		<!-- </dependency> -->
		<!-- <dependency> -->
		<!-- <groupId>org.apache.shiro</groupId> -->
		<!-- <artifactId>shiro-spring</artifactId> -->
		<!-- <version>${org.apache.shiro.version}</version> -->
		<!-- </dependency> -->

		<!-- 映入JSON -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-lgpl</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-lgpl</artifactId>
			<version>${jackson.version}</version>
		</dependency>

		<!-- web -->
		<!-- <dependency> -->
		<!-- <groupId>opensymphony</groupId> -->
		<!-- <artifactId>sitemesh</artifactId> -->
		<!-- <version>2.4.2</version> -->
		<!-- </dependency> -->
		<!-- lnn的系统所需组件 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
		</dependency>
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils-core</artifactId>
			<version>1.8.3</version>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.10</version>
		</dependency>
		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.6.3</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>bcm</finalName>
		<!-- pluginManagement主要是为了统一管理插件，确保所有子项目使用的插件版本保持一致，当有父子项目的时候，父项目中可以利用pluginManagement声明子项目中需要用到的插件，之后，当某个或者某几个子项目需要加载该插件的时候，就可以在子项目中plugins节点只配置 
			groupId 和 artifactId就可以完成插件的引用。 -->
		<!-- <pluginManagement> -->
		<!-- <plugins> -->
		<!-- <plugin> -->
		<!-- <groupId>org.eclipse.m2e</groupId> -->
		<!-- <artifactId>lifecycle-mapping</artifactId> -->
		<!-- <version>1.0.0</version> -->
		<!-- <configuration> -->
		<!-- <lifecycleMappingMetadata> -->
		<!-- <pluginExecutions> -->
		<!-- <pluginExecution> -->
		<!-- <pluginExecutionFilter> -->
		<!-- <groupId>some-group-id</groupId> -->
		<!-- <artifactId>some-artifact-id</artifactId> -->
		<!-- <versionRange>[1.0.0,)</versionRange> -->
		<!-- <goals> -->
		<!-- <goal>some-goal</goal> -->
		<!-- </goals> -->
		<!-- </pluginExecutionFilter> -->
		<!-- <action> -->
		<!-- <ignore /> -->
		<!-- </action> -->
		<!-- </pluginExecution> -->
		<!-- </pluginExecutions> -->
		<!-- </lifecycleMappingMetadata> -->
		<!-- </configuration> -->
		<!-- </plugin> -->
		<!-- </plugins> -->
		<!-- </pluginManagement> -->
		<plugins>
			<!-- 用来编译Java代码 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<encoding>${file.encoding}</encoding>
					<compilerArgument> -XDignore.symbol.file</compilerArgument>
				</configuration>
			</plugin>

			<!-- 用来处理资源文件.在资源文件中使用${propertyName}形式的Maven属性，然后配置maven-resources-plugin开启对资源文件的过滤，之后就可以针对不同环境通过命令行或者Profile传入属性的值，以实现更为灵活的构建。 -->
	<!-- <plugin> -->
	<!-- <groupId>org.apache.maven.plugins</groupId> -->
	<!-- <artifactId>maven-resources-plugin</artifactId> -->
	<!-- <version>${maven.resources.plugin.version}</version> -->
	<!-- <configuration> -->
	<!-- <encoding>${file.encoding}</encoding> -->
	<!-- </configuration> -->
	<!-- </plugin> -->

			<!-- 用来生成文档包 -->
	<!-- <plugin> -->
	<!-- <groupId>org.apache.maven.plugins</groupId> -->
	<!-- <artifactId>maven-javadoc-plugin</artifactId> -->
	<!-- <version>${maven.javadoc.plugin.version}</version> -->
	<!-- <configuration> -->
	<!-- <charset>UTF16</charset> -->
	<!-- <aggregate>true</aggregate> -->
	<!-- </configuration> -->
	<!-- </plugin> -->

			<!-- 扩展框架的功能，指定xml的schema的位置 -->
			<!-- <plugin> -->
			<!-- <groupId>com.alibaba.citrus.tool</groupId> -->
			<!-- <artifactId>springext-maven-plugin</artifactId> -->
			<!-- <version>${springext-plugin-version}</version> -->
			<!-- </plugin> -->

			<!-- maven-surefire-plugin 执行测试用例，maven通过surefire插件并fork一个子进程来执行用例的 -->
			<!-- <plugin> -->
			<!-- <groupId>org.apache.maven.plugins</groupId> -->
			<!-- <artifactId>maven-surefire-plugin</artifactId> -->
			<!-- <version>${maven.surefire.plugin.version}</version> -->
			<!-- </plugin> -->

			<!-- 其他插件 -->
			<!-- maven-assembly-plugin -->
			<!-- maven-clean-plugin 在打包时，需要清空一些指定的目录 -->
			<!-- tomcat-maven-plugin 将项目自动打包并部署到tomcat中 -->
			<!-- cargo-maven2-plugin 将项目自动打包并部署到tomcat中 -->
			<!-- maven-resources-plugin 把web项目的输出copy到tomcat的webapp下 -->
			<!-- maven-antrun-plugin 在maven中使用antrun调用bat文件 ，可以启动tomcat -->
			<!-- maven-war-plugin 将项目打成war包 -->
			<!-- maven-jar-plugin 将项目打成jar包 -->
			<!-- maven-dependency-plugin 自动拷贝jar包到target目录 ，部署war包时，需要将项目依赖的jar包，也打到war包中 -->
			<!-- build-info-maven-plugin -->
		</plugins>
	</build>
</project>
