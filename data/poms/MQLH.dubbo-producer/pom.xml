<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.hq.producer</groupId>
	<artifactId>dubbo-producer</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<dependencies>
		<!-- http://projects.spring.io/spring-framework/ -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.2.6.RELEASE</version>
		</dependency>
		<!-- http://mvnrepository.com/artifact/com.alibaba/dubbo -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>dubbo</artifactId>
			<version>2.5.3</version>
		</dependency>
		<!-- http://mvnrepository.com/artifact/com.101tec/zkclient -->
		<dependency>
			<groupId>com.101tec</groupId>
			<artifactId>zkclient</artifactId>
			<version>0.7</version>
		</dependency>
		<!-- localhost register services -->
		<dependency>
			<groupId>com.hq.register</groupId>
			<artifactId>dubbo-register</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
	</dependencies>
	
	<build>
		<sourceDirectory>${basedir}/src/main/java</sourceDirectory>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.8</source> <!-- 源代码使用的开发版本 -->
					<target>1.8</target> <!-- 需要生成的目标class文件的编译版本 -->
					<!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->

					<!-- 这下面的是可选项 -->
					<meminitial>128m</meminitial>
					<maxmem>512m</maxmem>
					<fork>true</fork> <!-- fork is enable,用于明确表示编译版本配置的可用 -->
					<compilerVersion>1.3</compilerVersion>

					<!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项 -->
					<compilerArgument>-verbose -bootclasspath ${java.home}\lib\rt.jar</compilerArgument>

				</configuration>
			</plugin>
		</plugins>
	</build>
</project>