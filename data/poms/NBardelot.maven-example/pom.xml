<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!-- Notez que le groupe et la version du POM parent seront hérités par 
		les modules s'ils sont omis dans leurs POM. Cela permet de limiter le nombre 
		de n° de version à gérer. -->
	<groupId>fr.soat.formation</groupId>
	<artifactId>maven-example-parent</artifactId>
	<version>0.0.4-SNAPSHOT</version>
	<name>POM parent</name>
	<packaging>pom</packaging>

	<scm>
		<url>https://github.com/NBardelot/maven-example.git</url>
		<connection>scm:git:https://github.com/NBardelot/maven-example.git</connection>
		<developerConnection>scm:git:https://github.com/NBardelot/maven-example.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<!-- On déclare dans le parent les modules dans l'ordre où il faut les compiler, 
		car ils peuvent dépendre les uns des autres. Attention aux dépendances cycliques 
		! -->
	<modules>
		<module>libtech</module>
		<module>web</module>
	</modules>

	<properties>
		<!-- Comme Java peut être compilé sur différents systèmes il est important 
			de préciser l'encodage utilisé. -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- C'est une bonne pratique de faire porter les versions par le POM parent 
			afin d'éviter les versions divergentes dans les POM des modules. Ces valeurs 
			sont héritées dans les POM enfants ! Dans le reste des POM on retrouvera 
			${foo.bar} à la place d'une valeur. -->
		<maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
		<java.version>1.8</java.version>
		<junit.version>3.8.1</junit.version>
		<javax.servlet-api.version>3.1.0</javax.servlet-api.version>
		<commons-codec.version>1.10</commons-codec.version>
		<maven-release-plugin.version>2.5.2</maven-release-plugin.version>
		<maven-invoker.version>2.2</maven-invoker.version>
		<maven-scm-provider-jgit.version>1.9.4</maven-scm-provider-jgit.version>
	</properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<!-- Force l'utilisation du plugin invoker en 2.2, Cf. bug https://issues.apache.org/jira/browse/MRELEASE-902 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven-release-plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.shared</groupId>
						<artifactId>maven-invoker</artifactId>
						<version>${maven-invoker.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<!-- On dit au plugin Release d'utiliser un client Git sous forme de plugin 
				Maven pour éviter les problèmes liés à la portabilité et à la configuration 
				système. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven-release-plugin.version}</version>
				<configuration>
					<providerImplementations>
						<git>jgit</git>
					</providerImplementations>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.scm</groupId>
						<artifactId>maven-scm-provider-jgit</artifactId>
						<version>${maven-scm-provider-jgit.version}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<!-- comme JUnit ne concerne que les tests on indique à Maven qu'il n'a 
				à en tenir compte qu'à ce moment là du cycle de vie -->
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>