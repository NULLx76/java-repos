<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>sample</groupId>
    <artifactId>reactor</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <prerequisites>
        <maven>3.0.5</maven>
    </prerequisites>

    <properties>
        <!--<project.root.basedir>/Users/admin/Dropbox/oc_work/postoffice/cobertura-agent-tests</project.root.basedir>-->
        <project.root.basedir>${user.dir}</project.root.basedir>

        <!-- project build settings -->
        <java.version>1.7</java.version>
        <file.encoding>utf-8</file.encoding>
        <project.build.sourceEncoding>${file.encoding}</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${file.encoding}</project.reporting.outputEncoding>

        <!-- library versions -->
        <jacoco.version>0.7.1.201405082137</jacoco.version>
        <jetty.version>9.2.1.v20140609</jetty.version>
        <spring.version>3.2.8.RELEASE</spring.version>
        <slf4j.version>1.7.2</slf4j.version>
        <logback.version>1.1.2</logback.version>
        <springsecurity.version>3.1.3.RELEASE</springsecurity.version>
        <thymeleaf.version>2.1.3.RELEASE</thymeleaf.version>
        <thymeleafspringsecurity3.version>2.1.1.RELEASE</thymeleafspringsecurity3.version>

        <!-- (1) Sonar connection properties - typically specified on commandline -->
        <sonar.host.url>http://localhost:9000</sonar.host.url>
        <sonar.jdbc.url>jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8</sonar.jdbc.url>
        <sonar.jdbc.username>sonar</sonar.jdbc.username>
        <sonar.jdbc.password>sonar</sonar.jdbc.password>
        <!-- end (1) -->
        
        <!-- (2) Help Sonar to be sure about language and version -->
        <sonar.language>java</sonar.language>
        <sonar.java.source>1.7</sonar.java.source>
        <!-- end (2) -->

        <!-- (3) mandatory Sonar properties for capturing raw coverage report output -->
        <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis> <!-- don't run tests if report file already exists -->

        <!-- where sonar will find the junit reports -->
        <sonar.junit.reportsPath>target/surefire-reports</sonar.junit.reportsPath>
        <sonar.junit.itReportsPath>target/failsafe-reports</sonar.junit.itReportsPath>

        <!-- write unit test coverage info to each module's target folder -->
        <sonar.jacoco.reportPath>target/jacoco-ut.exec</sonar.jacoco.reportPath>
        <!-- append integration test coverage from each module to the same(!) file -->
        <sonar.jacoco.itReportPath>${project.root.basedir}/target/jacoco-it.exec</sonar.jacoco.itReportPath>
        <!-- end (3) -->
    </properties>

    <modules>
        <module>sonar-jacoco-remotelistener</module>
        <module>sampleweb</module>
        <module>integration-tests</module>
        <module>acceptance-tests</module>
    </modules>

    <!-- (6) annoying, but there doesn't seem to be an easier way to add the necessary jacoco dependencies to the surefire runner for capturing per-test execution -->
    <dependencies>
        <dependency>
            <groupId>org.codehaus.sonar-plugins.java</groupId>
            <artifactId>sonar-jacoco-listeners</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jacoco</groupId>
            <artifactId>org.jacoco.agent</artifactId>
            <classifier>runtime</classifier>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <!-- end (6) -->
    
    <build>
        <!-- The finalName prevents project versions turning up in jar/war
            names. -->
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <!-- (4) configure jacoco-maven-plugin -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <configuration>
                    <append>true</append>
                    <propertyName>jacoco.agent.argLine</propertyName>
                </configuration>
                <executions>
                    <execution>
                        <id>jacoco-initialize</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${sonar.jacoco.reportPath}</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>jacoco-integration-initialize</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <destFile>${sonar.jacoco.itReportPath}</destFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- end (4) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>2.2.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>2.3</version>
                    <dependencies>
                        <dependency>
                            <groupId>mysql</groupId>
                            <artifactId>mysql-connector-java</artifactId>
                            <version>5.1.29</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>2.5</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>2.6</version>
                    <configuration>
                        <encoding>${file.encoding}</encoding>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.4</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>2.4</version>
                    <configuration>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                        <attachClasses>true</attachClasses>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.1</version>
                    <configuration>
                        <encoding>${file.encoding}</encoding>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                    </configuration>
                </plugin>
                <!-- (5) configure surefire to launch forked jvm with jacoco-agent -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.16</version>
                    <configuration>
                        <testFailureIgnore>false</testFailureIgnore>
                        <useFile>false</useFile>
                        <!-- (5.a) surefire must create junit report where sonar can find it later during analysis --> 
                        <reportsDirectory>${project.basedir}/${sonar.junit.reportsPath}</reportsDirectory>
                        <!-- (5.b) add jacoco-agent jvm argument to forked test jvm startup command -->
                        <argLine>${jacoco.agent.argLine}</argLine>
                        <!-- (5.c) optionally configure JUnitListener to capture per-test coverage -->
                        <properties>
                            <property>
                                <name>listener</name>
                                <value>org.sonar.java.jacoco.JUnitListener</value>
                            </property>
                        </properties>
                    </configuration>
<!--
                    <dependencies>
                        <dependency>
                            <groupId>org.apache.maven.surefire</groupId>
                            <artifactId>surefire-junit47</artifactId>
                            <version>2.16</version>
                        </dependency>
                    </dependencies>
-->
                    <executions>
                        <!-- (5.d) configure surefire to run all test classes matching "*IT" as integration tests -->
                        <execution>
                            <id>integration-test</id>
                            <phase>integration-test</phase>
                            <goals>
                                <goal>test</goal>
                            </goals>
                            <configuration>
                                <!-- (5.e) make sure, surefire and sonar use the same location for junit integration test reports -->
                                <reportsDirectory>${project.basedir}/${sonar.junit.itReportsPath}</reportsDirectory>
                                <argLine>${jacoco.agent.argLine}</argLine>
                                <includes>
                                    <include>**/*IT.class</include>
                                </includes>
                            </configuration>
                        </execution>
                        <!-- (6) configure surefire for running remote (e.g. Browser or REST) acceptance tests  -->
                        <execution>
                            <id>acceptance-test</id>
                            <phase>integration-test</phase>
                            <goals>
                                <goal>test</goal>
                            </goals>
                            <configuration>
                                <!-- (6.a) make sure, surefire and sonar use the same location for junit integration test reports -->
                                <reportsDirectory>${project.basedir}/${sonar.junit.itReportsPath}</reportsDirectory>
                                <!-- (6.b) DON'T use jacoco agent for (remote) acceptance tests JVM 
                                          we fetch the data from the remote JVM instead) 
                                -->
                                <argLine/>
                                <!-- (6.c) run all test classes matching the name pattern *AT -->
                                <includes>
                                    <include>**/*AT.class</include>
                                </includes>
                                <!-- (6.d) configure JUnitHttpListener to fetch coverage data after each test from {targeturl} 
                                           and write it to {destfile} 
                                -->
                                <properties>
                                    <property>
                                        <name>listener</name>
                                        <value>jacoco.JUnitHttpListener</value>
                                    </property>
                                </properties>
                                <systemPropertyVariables>
                                    <targeturl>http://localhost:8080/jacoco/</targeturl>
                                    <destfile>${sonar.jacoco.itReportPath}</destfile>
                                </systemPropertyVariables>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.eclipse.jetty</groupId>
                    <artifactId>jetty-maven-plugin</artifactId>
                    <version>${jetty.version}</version>
                    <configuration>
                        <contextPath>/</contextPath>
                        <stopKey>stopJetty</stopKey>
                        <stopPort>9999</stopPort>
                        <contextPath>/</contextPath>
                        <scanIntervalSeconds>10</scanIntervalSeconds>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-framework-bom</artifactId>
                <version>${spring.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${spring.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>3.0.1</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>1.2.2</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.1.3</version>
            </dependency>
            <dependency>
                <groupId>com.jayway.jsonpath</groupId>
                <artifactId>json-path</artifactId>
                <version>0.8.1</version>
            </dependency>
            <dependency>
                <groupId>xmlunit</groupId>
                <artifactId>xmlunit</artifactId>
                <version>1.5</version>
            </dependency>
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest-all</artifactId>
                <version>1.3</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>4.2.0.Final</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>${slf4j.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.version}</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>1.12.6</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.11</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.codehaus.sonar-plugins.java</groupId>
                <artifactId>sonar-jacoco-listeners</artifactId>
                <version>2.2.1</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.jacoco</groupId>
                <artifactId>org.jacoco.agent</artifactId>
                <version>${jacoco.version}</version>
                <classifier>runtime</classifier>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-runner</artifactId>
                <version>${jetty.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.ning</groupId>
                <artifactId>async-http-client</artifactId>
                <version>1.7.19</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

</project>
