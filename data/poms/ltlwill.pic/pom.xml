<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.hengzhiyi.it</groupId>
  <artifactId>pic</artifactId>
  <packaging>war</packaging>
  <version>1.0</version>
  <name>pic Maven Webapp</name>
  <url>http://maven.apache.org</url>

  <build>
    <finalName>pic</finalName>
    
    <!-- 插件区域  begin -->
    <plugins>  
		<!-- 解决出现错误问题 :JAX-RS(REST web service)2.0requires java 1.6 or newer-->
		<plugin>  
			<groupId>org.apache.maven.plugins</groupId>  
			<artifactId>maven-compiler-plugin</artifactId>  
			<version>3.3</version>
			<configuration>  
				<source>1.7</source>  
				<target>1.7</target>  
				<encoding>UTF-8</encoding>
			</configuration>  
		</plugin>
		<!-- 打包时跳过test插件，不运行test测试用例 -->
  		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>   
	        <artifactId>maven-surefire-plugin</artifactId>   
	        <version>2.4.2</version>   
	        <configuration>   
	          <skipTests>true</skipTests>   
	        </configuration>   
  		</plugin>
  	</plugins>	
  	<!-- 插件区域  end -->
  </build>
  
  <!-- spring全局依赖管理 begin -->
  <!-- An added benefit of using the BOM is that you no longer need to specify the <version> attribute when depending on Spring Framework artifacts -->
  <dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-framework-bom</artifactId>
            <version>4.2.3.RELEASE</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
  </dependencyManagement>
  <!-- spring全局依赖管理 end -->
  
  <dependencies>
  <!-- 第三方依赖区域 begin -->
  	<!-- spring依赖  begin -->
   	<dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aop</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aspects</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-beans</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context-support</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-expression</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-instrument</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-instrument-tomcat</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jdbc</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jms</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-messaging</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-orm</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-oxm</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-tx</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc-portlet</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-websocket</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-test</artifactId>
    </dependency>
  	<!-- spring依赖  end -->  
  	
 	<!-- jackson begin springMVC 4.2.3 依赖 -->
	<!-- 2.7.0-rc1版本在spring4.2.3中使用时会出现 方法不存在的情况 -->
	<!-- <dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-core</artifactId>
		<version>2.7.0-rc1</version>
	</dependency>
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-databind</artifactId>
		<version>2.7.0-rc1</version>
	</dependency>
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-annotations</artifactId>
		<version>2.7.0-rc1</version>
	</dependency> -->	
	
	<!-- 解决SpringMVC 4.2.3中使用@ResponseBody将对象返回成json时，出现找不到转换器的情况，在SpringMVC4.1.7中时不需要的 -->
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-core</artifactId>
		<version>2.4.3</version>
	</dependency>
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-databind</artifactId>
		<version>2.4.3</version>
	</dependency>
	<dependency>
    <groupId>net.sf.json-lib</groupId>
	    <artifactId>json-lib</artifactId>
	    <version>2.4</version>
	    <classifier>jdk15</classifier>
    </dependency>
	<!-- jackson end -->
	
  	
  	<!-- springMVC 验证器依赖jsr-303  (如果没有启动时会出现:“Unable to create a Configuration, because no Bean Validation provider could be found.
  		 Add a provider like Hibernate Validator (RI) to your classpath”的错误，但不影响启动结果)begin-->
  	<dependency>
  		<groupId>org.apache.bval</groupId>
  		<artifactId>bval-jsr</artifactId>
  		<version>1.1.0</version>
  	</dependency>
  	<!-- springMVC 验证器依赖jsr-303 end -->
  	
  	<!-- apache commons begin -->
  	<!-- 文件上传数据流 commons-io -->
	<dependency>
	    <groupId>org.apache.commons</groupId>
	    <artifactId>commons-io</artifactId>
	    <version>1.3.2</version>
	</dependency>
	<!-- 文件上传 -->
	<dependency>
		<groupId>commons-fileupload</groupId>
		<artifactId>commons-fileupload</artifactId>
		<version>1.3.1</version>
	</dependency>
	<!--lang3 补充java.lang包-->
	<dependency>
	<groupId>org.apache.commons</groupId>
	  <artifactId>commons-lang3</artifactId>
	  <version>3.4</version>
	</dependency>  
	
	<!--logging 日志-->
	<dependency>
	    <groupId>commons-logging</groupId>
	    <artifactId>commons-logging</artifactId>
	    <version>1.2</version>
	</dependency>
	<!--log4j commons-logging 需要它-->
	<dependency>
	    <groupId>log4j</groupId>
	    <artifactId>log4j</artifactId>
	    <version>1.2.17</version>
	</dependency>
	<dependency>
		<groupId>org.slf4j</groupId>
		<artifactId>slf4j-log4j12</artifactId>
		<version>1.7.12</version>
	</dependency>
  	<!-- apache commons end -->
  	
	<!-- jaxws-api依赖 begin (Java程序设计语言一个用来创建WebService的API)-->
	<dependency>
	    <groupId>javax.xml.ws</groupId>
	    <artifactId>jaxws-api</artifactId>
	    <version>2.2.11</version>
	</dependency>
	<!-- jaxws-api依赖 end -->
	
	<!-- servlet 依赖  begin (编译器需要)-->
 	<dependency>
	    <groupId>javax.servlet</groupId>
	    <artifactId>javax.servlet-api</artifactId>
	    <version>3.0.1</version>
	    <!-- 如果是provide，在springMVC中使用Servlet3.0上传文件时，启动会出现Part类找不到 -->
	   <!--  <scope>provided</scope> -->
	</dependency>
	<!-- servlet 依赖 end -->
	
	<!-- jstl begin (在jsp页面使用c标签)-->
	<dependency>
	    <groupId>javax.servlet.jsp.jstl</groupId>
	    <artifactId>jstl-api</artifactId>
	    <version>1.2</version>
	    <!-- <version>1.2-rev-1</version> -->
	</dependency>
	<!-- 依赖jstl还不够，必须还依赖standard，否则页面引入c标签后会出现错误:The absolute uri: http://java.sun.com/jsp/jstl/core cannot be resolved in either web.xml -->
	<dependency>
		<groupId>taglibs</groupId>
		<artifactId>standard</artifactId>
		<version>1.1.2</version>
	</dependency>
	<!-- jstl end -->
	
	<!-- mybatis begin -->
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis</artifactId>
		<version>3.3.0</version>
	</dependency>
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis-spring</artifactId>
		<version>1.2.3</version>
	</dependency>
	<!-- mybatis end -->
	
	<!-- Apache DBCP2 begin-->
	<dependency>
		<groupId>commons-dbcp</groupId>
		<artifactId>commons-dbcp2</artifactId>
		<version>2.1.1</version>	
	</dependency>
	<!-- Apache DBCP2 end -->
	
	<!-- C3P0 数据库连接池  begin -->
	<dependency>
		<groupId>com.mchange</groupId>	
		<artifactId>c3p0</artifactId>
		<version>0.9.5.1</version>
	</dependency>
	<!-- c3p0 需要 -->
	<dependency>
		<groupId>com.mchange</groupId>
		<artifactId>mchange-commons-java</artifactId>
		<version>0.2.10</version>
	</dependency>
	<!-- C3P0 数据库连接池  end -->
	
	<!-- mysql数据库驱动  begin -->
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<version>5.1.36</version>
		<!-- 只提供，不打包 ，一般的应用服务器都有了数据驱动，如:websphere,jboss等-->
		<!-- <scope>provided</scope> -->
	</dependency>
	<!-- mysql数据库驱动  end -->
	
	<!-- oracle数据库驱动  begin-->
	<dependency>
		<groupId>com.oracle</groupId>
		<artifactId>ojdbc6</artifactId>
		<version>1.0</version>
		<!-- 只提供，不打包 -->
		<!-- <scope>provided</scope> -->
	</dependency>
	<!-- oracle数据库驱动  end -->
	
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-pool2</artifactId>
		<version>2.4.2</version>
	</dependency>
	<dependency>
		<groupId>org.glassfish.hk2.external</groupId>
		<artifactId>javax.inject</artifactId>
		<version>2.4.0-b34</version>
	</dependency>
	
	<!-- ehcache begin -->
	<!-- <dependency>
	    <groupId>net.sf.ehcache</groupId>
	    <artifactId>ehcache</artifactId>
	    <version>2.10.2</version>
	</dependency> -->
	<!-- <dependency>
		<groupId>net.sf.ehcache</groupId>
		<artifactId>ehcache-core</artifactId>
		<version>2.6.11</version>
	</dependency> -->
	<dependency>
	    <groupId>net.sf.ehcache</groupId>
	    <artifactId>ehcache-core</artifactId>
	    <version>2.4.8</version>
	</dependency>
	
	<dependency>
	    <groupId>org.mybatis.caches</groupId>
	    <artifactId>mybatis-ehcache</artifactId>
	    <version>1.0.3</version>
	</dependency>
	<dependency>
	    <groupId>org.slf4j</groupId>
	    <artifactId>slf4j-api</artifactId>
	    <version>1.7.21</version>
	</dependency>
  	<!-- ehcache end -->		
  	
  	<!-- apache base64 utils -->
	<dependency>
	    <groupId>commons-codec</groupId>
	    <artifactId>commons-codec</artifactId>
	    <version>1.10</version>
	</dependency>
  <!-- 第三方依赖区域 end -->
  
  <!-- 本地依赖 begin -->
  	<!-- nothing -->
  <!-- 本地依赖 end-->
    
  	<!-- junit begin -->
  	<dependency>
  		<groupId>junit</groupId>
  		<artifactId>junit</artifactId>
  		<version>4.12</version>
  		<scope>test</scope>
  	</dependency>
  	<!-- junit end -->
  </dependencies>
</project>
