<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.murrayc.bigoquiz</groupId>
	<artifactId>gwt-bigoquiz</artifactId>
	<packaging>war</packaging>
	<version>2.0</version>
	<name>Big-O Quiz</name>

	<!-- Specify a recent maven version, so we can use later plugin versions.
	     We specify the same thing via the maven-enforcer-plugin, but that is normal.
	     See http://maven.apache.org/enforcer/maven-enforcer-plugin/faq.html#questionAndAnswer -->
	<prerequisites>
		<maven>3.3.9</maven>
	</prerequisites>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Convenience property to set the GWT version -->
		<gwt.version>2.8.1</gwt.version>

        <!-- Convenience property to set the GWTP version -->
        <gwtp.version>1.6</gwtp.version>
        <!-- <gin.version>2.1.2</gin.version> -->
        <!-- <gwt.style>OBF</gwt.style> -->

        <!--
        <guice.version>3.0</guice.version>
        -->


        <!-- Convenience property to set the AppEngine version -->
		<appengine.version>1.9.55</appengine.version>
		<appengine.application.version>1</appengine.application.version>

		<!-- Make mvn gwt:run use SSL (HTTPS) when running Jetty.
		     Login will fail (on purpose) if run as regular HTTP.
		     TODO: We could instead enable this when running mvn gwt:run, like so:
		      -Dgwt.server=:ssls
                     but how do we disable it now that it's on by default here?
                     Where is this maven gwt plugin property documented? -->
		<gwt.server>:ssl</gwt.server>

		<!-- GWT requires java 1.6 -->
		<!-- TODO: Isn't this a duplicate of the maven-compiler-plugin properties below? -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-servlet</artifactId>
			<version>${gwt.version}</version>
			<scope>compile</scope>  <!-- It is used for runtime and test scopes -->
		</dependency>
		<dependency>
			<groupId>com.google.gwt</groupId>
			<artifactId>gwt-user</artifactId>
			<version>${gwt.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.gwtplatform</groupId>
			<artifactId>gwtp-mvp-client</artifactId>
			<version>${gwtp.version}</version>
			<scope>provided</scope>
		</dependency>

        <!-- DI -->
        <!--
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>${guice.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.inject.extensions</groupId>
            <artifactId>guice-servlet</artifactId>
            <version>${guice.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.gwt.inject</groupId>
            <artifactId>gin</artifactId>
            <version>${gin.version}</version>
            <scope>provided</scope>
        </dependency>
        -->

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.5</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

        <!-- Google App Engine (GAE) -->
        <dependency>
          <groupId>com.google.appengine</groupId>
          <artifactId>appengine-api-1.0-sdk</artifactId>
          <version>${appengine.version}</version>
        </dependency>
        <dependency>
          <groupId>com.google.appengine</groupId>
          <artifactId>appengine-testing</artifactId>
          <version>${appengine.version}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>com.google.appengine</groupId>
          <artifactId>appengine-api-stubs</artifactId>
          <version>${appengine.version}</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>com.google.appengine</groupId>
          <artifactId>appengine-api-labs</artifactId>
          <version>${appengine.version}</version>
        </dependency>

        <!-- Objectify for persistence. It uses the stock javax.persistence annotations -->
        <dependency>
          <groupId>com.googlecode.objectify</groupId>
          <artifactId>objectify</artifactId>
          <version>5.1.13</version>
        </dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.4</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
			<type>jar</type>
			<scope>compile</scope> <!-- It is used for runtime and test scopes -->
		</dependency>

		<!-- This seems to be necessary so we can see errors from JDBC -->
		<dependency>
			<groupId>org.slf4j</groupId>
 			<artifactId>slf4j-simple</artifactId>
			<version>1.7.21</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.googlecode.gwt-test-utils</groupId>
			<artifactId>gwt-test-utils</artifactId>
			<version>0.47</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>3.4</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations-java5</artifactId>
			<version>15.0</version>
		</dependency>

		<!-- For JAX-RS annotations, such as @GET, @POST, @Path, @PathParam, @QueryParam, etc -->
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.1-m09</version>
			<!-- Note: 2.0 gives us a ClassNotFoundException about RxInvokerProvider when we try to GET from the URL. -->
		</dependency>

		<!-- For client-side code to query a REST/JSON server API.
		     This uses methods and classes annotated with JAX-RS annotations,
		     doing serialization/deserialization with Jackson. -->
		<dependency>
			<groupId>org.fusesource.restygwt</groupId>
			<artifactId>restygwt</artifactId>
			<version>2.2.0</version>
		</dependency>

		<!-- For JSON serialization/deserialization based on the JAX-RS annotations.
		     Used by RestyGWT on the client side.
		     Also adds some annotations such as @JsonInclude and @JsonIgnore, -->
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
			<version>2.8.9</version>
		</dependency>

		<!-- To serve REST/JSON queries of REST resources.
		     A <servlet> tag in the web.xml file indicates that Jersey should use certain classes as REST resources/servelets.
		     These REST resources/servlets use Java methods and classes annotated with JAX-RS and Jackson annotations.

		     jersey-container-servlet needs the Java Servlet API version 3, supported by the AppEngine Java 8 runtime (currently beta).
		     Alternatively, jersey-container-servlet-core needs the Java Servlet API version 2, supported by the AppEngine Java 7 runtime. -->
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>2.26-b07</version>
		</dependency>

		<!-- To let Jersey use Jackson. -->
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-jackson</artifactId>
			<version>2.26-b07</version>
		</dependency>

		<!-- Workaround this error:
		     java.lang.IllegalStateException: InjectionManagerFactory not found.
		     See https://stackoverflow.com/a/44546979/1123654 -->
		<dependency>
			<groupId>org.glassfish.jersey.inject</groupId>
			<artifactId>jersey-hk2</artifactId>
			<version>2.26-b07</version>
		</dependency>

	</dependencies>

	<url>https://github.com/murraycu/gwt-bigoquiz</url>
	<build>
		<!-- Generate compiled stuff in the folder used for developing mode -->
		<outputDirectory>${webappDirectory}/WEB-INF/classes</outputDirectory>

		<plugins>
			<plugin>
				<!-- Specify a recent maven version, so we can use later plugin versions.
                     We specify the same thing in the prerequisites tag, but that is normal.
				     See http://maven.apache.org/enforcer/maven-enforcer-plugin/faq.html#questionAndAnswer -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>1.4.1</version>
				<executions>
					<execution>
  						<id>enforce-versions</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireMavenVersion>
									<version>2.2.1</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- GWT Maven Plugin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
				<version>2.7.0</version>
				<executions>
					<execution>
						<goals>
							<goal>i18n</goal>
							<goal>compile</goal>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
				<!-- Plugin configuration. There are many available options, see gwt-maven-plugin
					documentation at codehaus.org -->
				<configuration>
					<runTarget>BigOQuiz.html</runTarget>
					<hostedWebapp>${webappDirectory}</hostedWebapp>

					<i18nConstantsBundles>
						<i18nConstantsBundle>com.murrayc.bigoquiz.client.ui.BigOQuizConstants</i18nConstantsBundle>
					</i18nConstantsBundles>

					<!-- Instead, we hand-code BigOQuizMessages,
					because this doesn't generate the correct method signatures for numbers.
					<i18nMessagesBundles>
						<i18nMessagesBundle>com.murrayc.bigoquiz.client.ui.BigOQuizMessages</i18nMessagesBundle>
					</i18nMessagesBundles>
					-->

					<mode>htmlunit</mode> <!-- Because the default, manual, waits for us to paste a URL into a browser. -->

					<!-- <productionMode>true</productionMode> -->

					<!-- Get nicer compiled Javascript for debugging. -->
					<!-- <style>PRETTY</style> -->
				</configuration>
			</plugin>

			<!-- Copy static web files before executing gwt:run -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>exploded</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<webappDirectory>${webappDirectory}</webappDirectory>
				</configuration>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<descriptors>
						<descriptor>assembly.xml</descriptor>
					</descriptors>
					<appendAssemblyId>false</appendAssemblyId>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId> 
				<version>3.5</version>
				<configuration>
					<!-- See https://code.google.com/p/googleappengine/issues/detail?id=9537 -->
					<source>1.8</source>
 					<target>1.8</target>
				</configuration>
			</plugin>

			<!-- This lets us do
			mvn dependency:analyze-report
			to generate target/dependency-analysis.html
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.10</version>
				<executions>
					<execution>
  						<id>copy</id>
						<phase>package</phase>
					</execution>
				</executions>
			</plugin>

			<!-- Google AppEngine plugin -->
			<plugin>
				<groupId>com.google.appengine</groupId>
				<artifactId>appengine-maven-plugin</artifactId>
				<version>${appengine.version}</version>
				<configuration>
                                  <version>${appengine.application.version}</version>
                                  <enableJarClasses>false</enableJarClasses>
                                  <!-- Uncomment the snippet below to bind to all IPs instead of just localhost -->
                                  <!-- <address>0.0.0.0</address> <port>8080</port> -->
                                  <!-- Uncomment the snippet below to enable local debugging with a remote debugger like those included with Eclipse or IntelliJ -->
                                  <!-- <jvmFlags><jvmFlag>-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n</jvmFlag></jvmFlags> -->
                                </configuration>
			</plugin>

		</plugins>
		<pluginManagement>
			<plugins>
			</plugins>
		</pluginManagement>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<!-- your configuration here -->
				</configuration>
			</plugin>
		</plugins>

	</reporting>

	<description>gwt-bigoquiz is an online quiz about the space and time Big-O complexities of common algorithms.</description>
	<scm>
		<url>https://github.com/murraycu/gwt-bigoquiz</url>
	</scm>
	<issueManagement>
		<system>Bugzilla</system>
		<url>https://github.com/murraycu/gwt-bigoquiz/issues</url>
	</issueManagement>
</project>
