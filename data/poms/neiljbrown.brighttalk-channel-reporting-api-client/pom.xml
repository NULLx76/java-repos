<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.neiljbrown.brighttalk.channels</groupId>
  <artifactId>brighttalk-channel-reporting-api-client</artifactId>
  <version>1.0.0-beta1</version>
  <packaging>jar</packaging>

  <name>brighttalk-channel-reporting-api-client</name>
  <description>Java implementation of API client for BrightTALK's Channel owner reporting APIs.</description>
  <url>https://github.com/neiljbrown/brighttalk-channel-reporting-api-client</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <org.springframework.version>4.0.6.RELEASE</org.springframework.version>
    <java.version>7</java.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>16.0.1</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.7</version>
      <scope>compile</scope>
    </dependency>
    <!-- Spring framework modules for Spring implementation of API client based on RestTemplate -->
    <!-- spring-web module for RestTemplate et al. -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>${org.springframework.version}</version>
      <scope>compile</scope>
    </dependency>
    <!-- spring-oxm module for Marshaller classes etc. -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-oxm</artifactId>
      <version>${org.springframework.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.3.3</version>
      <scope>compile</scope>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>${org.springframework.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.thoughtworks.xstream</groupId>
      <artifactId>xstream</artifactId>
      <version>1.4.7</version>
      <scope>test</scope>
    </dependency>
    <!-- Use an SLF4J-binding of logback-classic for testing purposes, but avoid imposing it as a dependency upon users of 
      the app by declaring the scope of the dependency of 'test' only -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.1.2</version>
      <scope>test</scope>
    </dependency>
    <!-- Add support for bridging logs written to Java Commons Logging by 3rd party classes (e.g. Apache HTTP client) to 
      SLF4J -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <version>1.7.7</version>
      <scope>test</scope>
    </dependency>
    <!-- Add support for bridging logs written to Log4j by 3rd party classes (e.g. Wiremock) to SLF4J -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
      <version>1.7.7</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <version>3.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.github.tomakehurst</groupId>
      <artifactId>wiremock</artifactId>
      <version>1.51</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.2</version>        
        <!-- Override Maven default of Java 5 source/runtime support, to allow use of newer language features -->
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.5</version>        
        <configuration>
          <excludes>
            <!-- Exclude environment specific props files from JAR. They're only templates and get packaged in zip -->
            <exclude>brighttalk-channel-reporting-api-client-*.properties</exclude>
          </excludes>
        </configuration>
      </plugin>
      <!-- Generate sources JAR in addition to default classes JAR -->
      <plugin>
        <artifactId>maven-source-plugin</artifactId>
        <version>2.4</version>        
        <executions>
          <execution>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Generate javadoc JAR in addition to default classes JAR -->
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.9.1</version>
        <executions>
          <execution>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Assemble the 'binary' distribution -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
          <descriptor>src/assembly/binary.xml</descriptor>
          <!-- Override default name of artifact. Use a shorter name for distribution which excludes assembly ID 
          <finalName>${project.name}-${project.version}</finalName>
          <appendAssemblyId>false</appendAssemblyId>
          -->
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>