<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.neo4j.build</groupId>
    <artifactId>parent-central</artifactId>
    <version>36</version>
    <relativePath />
  </parent>

  <groupId>org.neo4j.drivers</groupId>
  <artifactId>neo4j-python-embedded</artifactId>

  <version>1.9-SNAPSHOT</version>
  <name>Embedded Neo4j Python bindings</name>
  <packaging>jar</packaging>
  <description>
    Python bindings for the embedded Neo4j graph database.
  </description>

  <scm>
    <connection>scm:git:git://github.com/neo4j-contrib/python-embedded.git</connection>
    <developerConnection>scm:git:git@github.com:neo4j-contrib/python-embedded.git</developerConnection>
    <url>https://github.com/neo4j-contrib/python-embedded</url>
  </scm>

  <properties>
    <license-text.header>GPL-3-header.txt</license-text.header>
    <python>python</python>

    <!-- Paths used while testing. These are overridden for windows platforms, see the profiles section. -->
    <pythonpath>../../main/python:$PYTHONPATH</pythonpath>
    <jythonpath>../../main/python:$JYTHONPATH</jythonpath>
    <build.number>0</build.number>

    <neo4j.version>1.9-SNAPSHOT</neo4j.version>
    <gremlin.version>1.2</gremlin.version>
    <docs.url>http://docs.neo4j.org/python-embedded/${project.version}/index.html</docs.url>
  </properties>

  <licenses>
    <license>
      <name>GNU General Public License, Version 3</name>
      <url>http://www.gnu.org/licenses/gpl-3.0-standalone.html</url>
      <comments>The software ("Software") developed and owned by Network Engine for
Objects in Lund AB (referred to in this notice as "Neo Technology") is
licensed under the GNU GENERAL PUBLIC LICENSE Version 3 to all third
parties and that license is included below.

However, if you have executed an End User Software License and Services
Agreement or an OEM Software License and Support Services Agreement, or
another commercial license agreement with Neo Technology or one of its
affiliates (each, a "Commercial Agreement"), the terms of the license in
such Commercial Agreement will supersede the GNU GENERAL PUBLIC LICENSE
Version 3 and you may use the Software solely pursuant to the terms of
the relevant Commercial Agreement.
			</comments>
    </license>
  </licenses>

  <dependencies>
    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>neo4j</artifactId>
      <version>${neo4j.version}</version>
    </dependency>

    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>neo4j-cypher</artifactId>
      <version>${neo4j.version}</version>
    </dependency>

  </dependencies>

  <repositories>
    <repository>
      <id>neo4j-dev</id>
      <name>Neo4j Developer Repository</name>
      <url>http://m2.neo4j.org/content/groups/everything/</url>
    </repository>
  </repositories>

  <build>
    <sourceDirectory>src/main/java</sourceDirectory>
    <testSourceDirectory>src/test/python</testSourceDirectory>

    <plugins>
      <!-- Generate appropriate python version from current project version. See: http://www.python.org/dev/peps/pep-0386/ -->
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
        <version>1.3</version>
        <executions>
          <execution>
            <id>pythonificate-version-number</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <source>
def version = project.version

// 1.5-SNAPSHOT -&gt; 1.5.dev1
version = version.replace("-SNAPSHOT", ".dev" + project.properties['build.number'])

// 1.5.RC1 -&gt; 1.5.c1
version = version.replace("RC","c")

// 1.5.M01 -&gt; 1.5.b1
version = version.replace("M0","b")
version = version.replace("M","b")
project.properties['pythonic_version'] = version
              </source>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Assemble python distribution -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>python-distribution</id>
            <phase>package</phase>
            <configuration>
              <attach>false</attach>
              <appendAssemblyId>true</appendAssemblyId>
              <descriptors>
                <descriptor>src/main/assembly/python-distribution.xml</descriptor>
              </descriptors>
            </configuration>
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence 
          on the Maven build itself. -->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>
                      org.codehaus.gmaven
                    </groupId>
                    <artifactId>
                      gmaven-plugin
                    </artifactId>
                    <versionRange>
                      [1.3,)
                    </versionRange>
                    <goals>
                      <goal>execute</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <profiles>
    <profile>
      <id>cpython-test</id>
      <properties>
        <python>python</python>
      </properties>
    </profile>
    <profile>
      <id>jython-test</id>
      <properties>
        <python>jython</python>
      </properties>
    </profile>
    <profile>
      <id>windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <pythonpath>../../main/python</pythonpath>
        <jythonpath>../../main/python</jythonpath>
      </properties>
    </profile>

    <profile>
      <id>run-tests</id>
      <activation>
        <property>
          <name>!skipTests</name>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- Test execution -->
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <configuration>
                  <executable>${python}</executable>
                  <workingDirectory>src/test/python</workingDirectory>
                  <arguments>
                    <!-- Uncomment this to enable remote JVM debugging under jython -->
                    <!--argument>-J-Xdebug</argument> <argument>-J-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=1044</argument -->
                    <argument>unit_tests.py</argument>
                    <argument>--classpath</argument>
                    <classpath />
                    <argument>--junit</argument>
                    <argument>${basedir}/target/surefire-reports</argument>
                  </arguments>
                  <environmentVariables>
                    <PYTHONPATH>${pythonpath}</PYTHONPATH>
                    <JYTHONPATH>${jythonpath}</JYTHONPATH>
                  </environmentVariables>
                </configuration>
                <id>python-test</id>
                <phase>test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>

    </profile>

    <profile>
      <id>performance-test</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>python-performance-test</id>
                <phase>test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>pdb</executable>
                  <!--executable>${python}</executable -->
                  <workingDirectory>src/perftest/python</workingDirectory>
                  <arguments>
                    <argument>performance_tests.py</argument>
                    <argument>--classpath</argument>
                    <classpath />
                  </arguments>
                  <environmentVariables>
                    <PYTHONPATH>${pythonpath}</PYTHONPATH>
                    <JYTHONPATH>${jythonpath}</JYTHONPATH>
                  </environmentVariables>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Deploy the finished python library to pypi -->
    <!-- NOTICE: This only works on windows machines, due to dependencies on win32api for building windows 
      installers. -->
    <profile>
      <id>pypi</id>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>pypi-deploy</id>
                <phase>install</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target>
                    <unzip src="${basedir}/target/${project.build.finalName}-python-dist.zip"
                      dest="${basedir}/target/" overwrite="true" />

                    <!-- Windows 32bit installer -->
                    <exec executable="python" failonerror="true" dir="${basedir}/target/neo4j-embedded">
                      <arg value="setup.py" />
                      <arg value="build" />
                      <arg value="--plat-name=win-amd64" />
                      <arg value="bdist_wininst" />
                      <arg value="upload" />
                    </exec>

                    <!-- Windows 64bit installer -->
                    <exec executable="python" failonerror="true" dir="${basedir}/target/neo4j-embedded">
                      <arg value="setup.py" />
                      <arg value="build" />
                      <arg value="--plat-name=win32" />
                      <arg value="bdist_wininst" />
                      <arg value="upload" />
                    </exec>

                    <!-- Source distribution -->
                    <exec executable="python" failonerror="true" dir="${basedir}/target/neo4j-embedded">
                      <arg value="setup.py" />
                      <arg value="sdist" />
                      <arg value="--formats=gztar,zip" />
                      <arg value="upload" />
                    </exec>
                  </target>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>neo-docs-build</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>docsBuild</name>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.neo4j.build.plugins</groupId>
          <artifactId>neo4j-doctools</artifactId>
          <version>1</version>
          <scope>provided</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack-doctools</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <type>jar</type>
                  <includeArtifactIds>neo4j-doctools</includeArtifactIds>
                  <outputDirectory>${docs.tools}</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-docs</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/docs</outputDirectory>
                  <resources>
                    <resource>
                      <directory>src/docs</directory>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>copy-configuration</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/conf</outputDirectory>
                  <resources>
                    <resource>
                      <directory>src/docs/conf</directory>
                      <excludes>
                        <exclude>version</exclude>
                      </excludes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>copy-version</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/conf</outputDirectory>
                  <resources>
                    <resource>
                      <directory>src/docs/conf</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>version</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>copy-test-sources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.build.directory}/test-sources/neo4j-python-embedded-test-sources-jar</outputDirectory>
                  <resources>
                    <resource>
                      <directory>src/test/python</directory>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>execute-asciidoc</id>
                <phase>compile</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>make</executable>
                  <arguments>
                    <argument>init</argument>
                    <argument>preview</argument>
                    <argument>VERSION=${project.version}</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <properties>
        <docs.tools>${project.build.directory}/tools</docs.tools>
        <attach-docs-phase>none</attach-docs-phase>
      </properties>
    </profile>
    <profile>
      <id>publish-manual</id>
      <activation>
        <activeByDefault>false</activeByDefault>
        <property>
          <name>publish-manual</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>upload-to-servers</id>
                <phase>deploy</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>${project.build.directory}/../src/docs/conf/upload.sh</executable>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <distributionManagement>
    <site>
      <id>neo4j-site</id>
      <url>scpexe://static.neo4j.org/var/www/components.neo4j.org/${project.artifactId}/${project.version}</url>
    </site>
  </distributionManagement>

</project>
