<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>      <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
    <groupId>com.qxgnote</groupId>         <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
    <artifactId>qxgnote</artifactId>
    <packaging>war</packaging>              <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型,父级项目必须是pom类型,而子项目是jar或war,默认是jar,一般部署的时候使用war,而如果是在子模块中进行依赖,则最好打包为jar -->
    <version>1.0-SNAPSHOT</version>         <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
    <name>qxgnote</name>                       <!--项目的名称, Maven产生的文档用 -->
    <url>http://maven.apache.org</url>      <!--项目主页的URL, Maven产生的文档用 -->
    <description>note</description>

    <!--主要依赖库的版本定义-->
    <properties>
        <!-- main version setting -->
        <junit.version>4.12</junit.version>
        <spring.version>4.3.5.RELEASE</spring.version>
        <mybatis.version>3.4.2</mybatis.version>
        <mysql.driver.version>5.1.40</mysql.driver.version>
        <druid.version>1.0.26</druid.version>
        <shiro.version>1.3.2</shiro.version>

        <!-- tools version setting -->
        <mybatis-spring.version>1.3.1</mybatis-spring.version>
        <mybaitsplus.version>2.0.1</mybaitsplus.version>
        <ehcache.version>3.1.3</ehcache.version>
        <sitemesh.version>3.0.1</sitemesh.version>
        <quartz.version>2.2.3</quartz.version>
        <jackson.version>2.8.4</jackson.version>
        <fastjson.version>1.2.20</fastjson.version>
        <log4j2.version>2.7</log4j2.version>
        <slf4j.version>1.7.21</slf4j.version>
        <commons-io.version>2.4</commons-io.version>
        <commons-fileupload.version>1.3.1</commons-fileupload.version>
        <javax.servlet-api.version>4.0.0-b01</javax.servlet-api.version>
        <velocity.version>1.7</velocity.version>

        <!-- environment setting -->
        <jdk.version>1.8</jdk.version>
        <morning.version>2.0.0-SNAPSHOT</morning.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>


    <dependencies>
        <!-- 1.TEST:单元测试框架 begin -->
        <dependency>
            <groupId>junit</groupId>         		<!--依赖的group ID -->
            <artifactId>junit</artifactId>   		<!--依赖的artifact ID -->
            <version>${junit.version}</version> 	<!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 -->
            <scope>test</scope>			   			<!-- 依赖项的适用范围：test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 -->
        </dependency>
        <!-- TEST end -->

        <!-- 2.SPRING相关依赖 begin -->
        <!-- ①.spring核心依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>	<!--包含Spring框架基本的核心工具类 -->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>	<!--springIoC（依赖注入）的基础实现 -->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>	<!--spring 提供在基础 IoC 功能上的扩展服务 -->
            <version>${spring.version}</version>
        </dependency>

        <!-- ②.spring 持久层依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>		<!--封装了spring对于事物的控制 -->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>	<!--包含对Spring对JDBC数据访问进行封装的所有类 -->
            <version>${spring.version}</version>
        </dependency>

        <!-- ③.spring web相关依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>		<!--包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入 WebApplicationContext 特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类 -->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>	<!--Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架 -->
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- ④.spring test依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>	<!--与Junit单元测试、集成测试 -->
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- ⑤.spring 其它依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>	<!--spring面向切面编程，提供AOP（面向切面编程） -->
            <artifactId>spring-aop</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-oxm</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <!-- SPRING相关依赖 end -->

        <!-- 3.SERVLET WEB begin -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId><!--j2ee web spec -->
            <version>${javax.servlet-api.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>			  <!--JSTL标签类 -->
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId> <!--jackson json:高性能的JSON处理 -->
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>		  <!-- 格式化对象，方便输出日志 -->
            <version>${fastjson.version}</version>
        </dependency>
        <!-- SERVLET WEB end -->

        <!-- 4.MYBATIS 持久层框架 begin -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>${mybatis.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
            <version>${mybatis-spring.version}</version>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus</artifactId>		<!-- mybatis-plus Mybatis增强辅助工具 -->
            <version>${mybaitsplus.version}</version>
        </dependency>
        <!-- MYBATIS 持久层框架 end -->

        <!-- 5.MYSQL 数据库相关依赖 begin -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId><!-- 导入Mysql数据库驱动包 -->
            <version>${mysql.driver.version}</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>               <!-- connection pool:数据库连接池,用来在spingMVC-mybatis.xml中配置数据库 -->
            <version>${druid.version}</version>
        </dependency>
        <!-- MYSQL 数据库相关依赖 end -->

        <!-- 6.LOG 日志相关依赖 begin -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>			<!--核心log4j2jar包 -->
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>   <!-- 桥接：告诉Slf4j使用Log4j2 -->
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-jcl</artifactId>  		<!-- 桥接：告诉commons logging使用Log4j2 -->
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>			<!-- slf4j -->
            <version>${slf4j.version}</version>
        </dependency>
        <!-- LOG 日志相关依赖 end -->

        <!-- spring 定时:Quartz 时间配置详解 -->
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
            <version>${quartz.version}</version>
        </dependency>



        <!-- Commons项目中用来处理Java基本对象方法的工具类包 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.5</version>
        </dependency>

    </dependencies>


    <build>
        <finalName>qxgnote</finalName>
    </build>

    <!-- 开发者信息 -->
    <developers>
        <developer>
            <name>qxg</name>
            <id>qxg</id>
            <email>qinxiaoguang95@163.com</email>
            <roles>
                <role>Developer</role>
            </roles>
            <timezone>+8</timezone>
        </developer>
    </developers>
</project>
