<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- 父pom文件
        聚合：在<modules>标签中，声明所有子模块，通过父项目的构建，可以对子模块进行统一的构建
        继承：所有聚合的子模块，都可以继承父类的属性：groupId、artifactId、version、依赖、插件等等
    -->


    <!-- 指pom.xml的版本 Maven2和Maven3固定是4.0.0 -->
    <modelVersion>4.0.0</modelVersion>
    <!-- 组Id(一般是项目名称)，一般与公司或组织有关，
        如org.apache.maven : org.apache是公司组织标识，maven是项目标识
    -->
    <groupId>com.cw.chwo</groupId>
    <!-- 组中的唯一Id(一般是项目的子模块)，命名一般是[项目名-子模块名称] -->
    <artifactId>chwo-parent</artifactId>
    <!-- 定义Maven项目打包方式，不写默认为jar(在聚合和继承的父pom.xml中 <packaging>必须是pom) -->
    <packaging>pom</packaging>
    <!-- 当前maven项目的版本号 SNAPSHOT:开发版本 -->
    <version>1.0-SNAPSHOT</version>

    <!-- modules 聚合模块配置
            聚合：此项目是父子结构，其他还有平行结构，如果是平行结构则module的值为../chwoutil  ../chwocore
                    可以在父模块上执行构建，使的所有子模块只构建一次

            继承：可被继承的信息如下：
                        groupId:项目组Id，项目坐标的核心元素
                        version:项目版本号，项目坐标的核心元素
                        description:项目描述信息
                        organization:项目的组织信息
                        inceptionYear:项目创立的年份
                        url:项目的Url地址
                        developers:项目的开发者信息
                        contributors:项目的贡献者信息
                        distributionManagement:项目的部署配置
                        issueManagement:项目的缺陷跟踪系统信息
                        ciManagement:项目的持续集成系统信息
                        scm:项目的版本控制系统信息
                        mailingLists:项目的邮件列表信息
                        properties:自定义的Maven属性
                        dependencies:项目的依赖配置
                        dependencyManagement:项目的依赖管理配置
                        repositories:项目的仓库配置
                        build:包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等等
                        reporting:包括项目的报告输出目录配置、报告插件配置等
    -->
    <modules>
        <!-- module的值是当前pom的相对子模块目录 -->
        <module>chwoutil</module>
        <module>chwoserver</module>
        <module>chwoweb</module>
        <module>chwomodule</module>
        <module>chwomapper</module>
    </modules>

    <!-- 自定义Maven变量属性 -->
    <properties>
        <springframework.name>org.springframework</springframework.name>
        <springframework.version>4.3.8.RELEASE</springframework.version>
    </properties>


    <!--配置依赖
        可选依赖：<optional>true</optional>,当其他模块依赖次模块时，其他需要显示声明此依赖
        归类依赖：变量配置，通过变量的形式定义依赖的版本，格式:${springframework.version}
        排除依赖：当A依赖B，B依赖C，如果C是开发版本，
                    那么在A的pom文件中对于B的依赖显示的排除C依赖，
                    并在A的pom中显示的声明需要引入的C依赖
                    <exclusions> 排除
                        <exclusion>
                            <groupId>C</groupId>
                            <artifactId>C</artifactId>
                        </exclusion>
                    </exclusions>
       优化依赖：尽量显示的声明所有用到的传递性依赖

       dependencyManagement:依赖管理，不妨碍子模块继承父模块的依赖，还可以使子模块继承更灵活，
                    子模块不会实际的引入父模块中dependencyManagement管理的以来，
                    子模块在使用父模块的依赖时，需要在子模块的pom中显示的声明，
                        只需要在子模块中声明依赖的groupId和artifactId
                    这样就不会使子模块多余的继承父模块中的所有依赖。
    -->
    <dependencyManagement>
        <dependencies>
            <!--  测试框架  -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.12</version>
            </dependency>

            <!--  Spring框架相关  -->
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-core</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-beans</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-context</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-web</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-aop</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-test</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-context-support</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-aspects</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-tx</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-oxm</artifactId>
                <version>${springframework.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.8.8</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>2.8.8</version>
            </dependency>
            <dependency>
                <groupId>com.lowagie</groupId>
                <artifactId>itext</artifactId>
                <version>4.2.2</version>
            </dependency>
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>3.16</version>
            </dependency>


            <!--  数据库相关  -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>1.0.31</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>3.4.4</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>1.3.1</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-core</artifactId>
                <version>1.3.5</version>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.38</version>
            </dependency>

            <!-- Cache相关 -->
            <dependency>
                <groupId>redis.clients</groupId>
                <artifactId>jedis</artifactId>
                <version>2.9.0</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-redis</artifactId>
                <version>1.8.3.RELEASE</version>
            </dependency>

            <!--  Log相关  -->

            <!--  MQ  -->
            <dependency>
                <groupId>org.apache.activemq</groupId>
                <artifactId>activemq-broker</artifactId>
                <version>5.14.5</version>
            </dependency>
            <dependency>
                <groupId>org.apache.activemq</groupId>
                <artifactId>activemq-client</artifactId>
                <version>5.14.5</version>
            </dependency>
            <dependency>
                <groupId>org.apache.activemq</groupId>
                <artifactId>activemq-kahadb-store</artifactId>
                <version>5.14.5</version>
            </dependency>
            <dependency>
                <groupId>org.apache.activemq</groupId>
                <artifactId>activemq-spring</artifactId>
                <version>5.14.5</version>
            </dependency>
            <dependency>
                <groupId>org.fusesource.hawtbuf</groupId>
                <artifactId>hawtbuf</artifactId>
                <version>1.11</version>
            </dependency>
            <dependency>
                <groupId>org.apache.activemq</groupId>
                <artifactId>activemq-core</artifactId>
                <version>5.7.0</version>
            </dependency>
            <dependency>
                <groupId>${springframework.name}</groupId>
                <artifactId>spring-jms</artifactId>
                <version>${springframework.version}</version>
            </dependency>

            <!--  velocity视图 -->
            <dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity</artifactId>
                <version>1.7</version>
            </dependency>
            <dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity-tools</artifactId>
                <version>2.0</version>
            </dependency>

            <!-- ThymeLeaf 视图 -->
            <!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf -->
            <dependency>
                <groupId>org.thymeleaf</groupId>
                <artifactId>thymeleaf</artifactId>
                <version>3.0.6.RELEASE</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 -->
            <dependency>
                <groupId>org.thymeleaf</groupId>
                <artifactId>thymeleaf-spring4</artifactId>
                <version>3.0.6.RELEASE</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.attoparser/attoparser -->
            <dependency>
                <groupId>org.attoparser</groupId>
                <artifactId>attoparser</artifactId>
                <version>2.0.4.RELEASE</version>
            </dependency>



            <!--  Shiro  -->
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-core</artifactId>
                <version>1.4.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-web</artifactId>
                <version>1.4.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-spring</artifactId>
                <version>1.4.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.shiro</groupId>
                <artifactId>shiro-ehcache</artifactId>
                <version>1.4.0</version>
            </dependency>

            <!-- 文件/流 -->
            <dependency>
                <groupId>commons-io</groupId>
                <artifactId>commons-io</artifactId>
                <version>2.5</version>
            </dependency>
            <dependency>
                <groupId>commons-fileupload</groupId>
                <artifactId>commons-fileupload</artifactId>
                <version>1.3.1</version>
            </dependency>



            <!--  其他  -->
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
                <version>1.2</version>
            </dependency>
            <!--<dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-simple</artifactId>
                <version>1.7.25</version>
            </dependency>-->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.7.25</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>1.7.25</version>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>1.2.17</version>
            </dependency>
            <!-- jsr250 @PostConstruct bean初始化  @PreDestroy bean销毁 -->
            <dependency>
                <groupId>javax.annotation</groupId>
                <artifactId>jsr250-api</artifactId>
                <version>1.0</version>
            </dependency>



            <!--luence检索-->
            <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-core -->
            <dependency>
                <groupId>org.apache.lucene</groupId>
                <artifactId>lucene-core</artifactId>
                <version>4.0.0</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-analyzers-common -->
            <dependency>
                <groupId>org.apache.lucene</groupId>
                <artifactId>lucene-analyzers-common</artifactId>
                <version>4.0.0</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser -->
            <dependency>
                <groupId>org.apache.lucene</groupId>
                <artifactId>lucene-queryparser</artifactId>
                <version>4.0.0</version>
            </dependency>

            <!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
            <dependency>
                <groupId>org.apache.poi</groupId>
                <artifactId>poi</artifactId>
                <version>3.9</version>
            </dependency>



        </dependencies>

    </dependencyManagement>


    <!-- 配置maven的生命周期和插件
        1、生命周期：对项目构建过程抽象
           构建过程：清理，初始化，编译，测试，打包，集成，部署和生成站点等等一系列的步骤
           注：生命周期和构建过程一一映射，生命周期本身不做任何工作，全部由插件来完成(类似于模板方法模式)

            clean生命周期：
                    pre-clean:执行一些清理前完成的工作
                    clean:清理上一次构建生成的文件
                    post-clean:执行一些清理后完成的工作
            default生命周期：构建所需步骤
                    。。。略
            site生命周期：建立和发布项目站点
                    pre-site:执行一些在项目生成站点之前完成的工作
                    site:生成项目站点文档
                    post-site:执行一些在项目生成站点之后完成的工作
                    site-deploy:将生成的项目站点发送到服务器

        2、插件：真正的完成构建过程的工作
           每个插件都对应多个目标(功能)，也就是一个插件可以做很多事情(提高了插件代码的复用性)
            插件对应目标的格式：插件名称:目标名称
            例如：插件maven-dependency-plugin有十多种目标，目标对应的maven-dependency-plugin插件格式：
                    dependency:analyze
                    dependency:tree
                    dependency:list
                  这是一种通用的写法，冒号前面是插件前缀，后面是该插件的目标

        3、插件绑定：maven的生命周期与插件相互绑定，用于完成实际的构建任务
                    (也就是说生命周期的阶段与插件目标相互绑定)
                    例如：编译阶段(compile)绑定了maven-compile-plugin插件的compile目标

            除了maven做的内置的绑定，我们也可以自定义绑定：
                例如：创建项目的源码jar包
                    插件：maven-source-plugin
                    插件目标：jar-no-fork
                    生命周期阶段：default周期的verify阶段

        4、修改插件参数配置
            在命令行中可以通过 mvn 命令 -D参数名=值 进行配置(-D是java自带的系统参数修改属性)

            配置全局插件参数：作用于所有使用该插件所有目标的所有任务
                例如：修改maven-compiler-plugin使用jdk1.8版本来编译源文件，生成jdk1.8的字节码文件

            配置指定插件目标参数：作用于该插件指定目标的指定任务
                例如：maven-antrun-plugin插件有一个目标run，将不同配置的run目标绑定到多个任务上，
                    就可以在不同的阶段上执行不同的任务

        pluginManagement:插件管理，原理和作用和依赖管理一致(dependencyManagement)
                    子模块中显示声明，只需要在子模块中声明插件的groupId和artifactId

    -->
    <build><!-- 如果插件是官方提供的，则可以省略掉groupId -->
        <pluginManagement>
            <plugins>
                <!-- 自定义插件绑定，参考[maven的生命周期和插件]注释的3条 -->
                <plugin>
                    <!-- 插件的groupId -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <!-- 插件的artifactId -->
                    <artifactId>maven-source-plugin</artifactId>
                    <!-- 插件的版本 -->
                    <version>2.1.1</version>
                    <!-- 配置每一个插件目标绑定的周期阶段任务 -->
                    <executions>
                        <execution>
                            <!-- 配置id为attach-source的任务 -->
                            <id>attach-source</id>
                            <!--将这个任务绑定到verify阶段，如果不写的话，将在插件目标默认的阶段执行 -->
                            <phase>verify</phase>
                            <!-- 给此任务配置执行的插件目标(对应任务)，如果配置多个目标，按顺序执行 -->
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- 配置全局插件参数，参考[maven的生命周期和插件]注释的4条 -->
                <plugin>
                    <!-- 插件的groupId -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <!-- 插件的artifactId -->
                    <artifactId>maven-compiler-plugin</artifactId>
                    <!-- 插件的版本 -->
                    <version>2.1</version>
                    <!-- configuration表示全局的插件配置 -->
                    <configuration>
                        <!-- 源代码使用jdk1.8 -->
                        <source>1.8</source>
                        <!-- 输出的class字节码使用jdk1.8 -->
                        <target>1.8</target>
                    </configuration>
                </plugin>

                <!-- 配置指定插件目标任务参数，参考[maven的生命周期和插件]注释的4条 -->
                <plugin>
                    <!-- 插件的groupId -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <!-- 插件的artifactId -->
                    <artifactId>maven-antrun-plugin</artifactId>
                    <!-- 插件的版本 -->
                    <version>1.3</version>
                    <!-- 配置每一个插件目标绑定的周期阶段任务 -->
                    <executions>
                        <execution>
                            <!-- 配置id为ant-validata的任务 -->
                            <id>ant-validata</id>
                            <!--将这个任务绑定到validate阶段，如果不写的话，将在插件目标默认的阶段执行 -->
                            <phase>validate</phase>
                            <!-- 给此任务配置执行的插件目标(对应任务)，如果配置多个目标，按顺序执行 -->
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <!--配置该插件目标对应任务的参数-->
                            <configuration>
                                <tasks>
                                    <echo>I'm bound validata phase</echo>
                                </tasks>
                            </configuration>
                        </execution>
                        <execution>
                            <!-- 配置id为ant-verify的任务 -->
                            <id>ant-verify</id>
                            <!--将这个任务绑定到verify阶段，如果不写的话，将在插件目标默认的阶段执行 -->
                            <phase>verify</phase>
                            <!-- 给此任务配置执行的插件目标(对应任务)，如果配置多个目标，按顺序执行 -->
                            <goals>
                                <goal>run</goal>
                            </goals>
                            <!--配置该插件目标对应任务的参数-->
                            <configuration>
                                <tasks>
                                    <echo>I'm bound verify phase</echo>
                                </tasks>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <!--在settings文件中配置依赖仓库和插件仓库 和 仓库镜像
        1、在pom中配置的依赖仓库和插件仓库只对当前maven项目有效
            在settings文件中配置的依赖仓库和插件仓库，对使用了此settings文件的maven项目都有效
        2、在settings文件中配置私服镜像
            因为maven配置默认的库是主仓库，在请求构建的时候还会去遍历所有仓库(包含主仓库)，
            这时我们需要把所有请求主仓库映射到nexus
        配置如下：
            <settings>
                ......
                <mirrors>
                        <mirror>
                            <id>nexus</id>
                            <name>Nexus</name>
                            <url>http://localhost:8081/nexus/content/groups/public/</url>
                            <mirrorOf>*</mirrorOf>
                        </mirror>
                </mirrors>
                <profiles>
                    <profile>
                        <id>nexus</id>
                        <repositories>
                            <repository>
                                <id>nexus</id>
                                <name>Nexus</name>
                                <url>http://localhost:8081/nexus/content/groups/public/</url>
                                <releases>
                                    <enabled>true</enabled>
                                    <updatePolicy>daily</updatePolicy>
                                    <checksumPolicy>warn</checksumPolicy>
                                </releases>
                                <snapshots>
                                    <enabled>true</enabled>
                                    <updatePolicy>daily</updatePolicy>
                                    <checksumPolicy>warn</checksumPolicy>
                                </snapshots>
                            </repository>
                        </repositories>

                        <pluginRepositories>
                            <pluginRepository>
                                <id>nexus</id>
                                <name>Nexus</name>
                                <url>http://localhost:8081/nexus/content/groups/public/</url>
                                <releases>
                                    <enabled>true</enabled>
                                    <updatePolicy>daily</updatePolicy>
                                    <checksumPolicy>warn</checksumPolicy>
                                </releases>
                                <snapshots>
                                    <enabled>true</enabled>
                                    <updatePolicy>daily</updatePolicy>
                                    <checksumPolicy>warn</checksumPolicy>
                                </snapshots>
                            </pluginRepository>
                        </pluginRepositories>
                    </profile>
                </profiles>
                <activeProfiles>
                    <activeProfile>nexus</activeProfile>
                </activeProfiles>
                ......
            </settings>

            <activeProfiles>:将nexus这个profile激活，这样当构建maven项目时，激活后的profile会将仓库配置应用到项目中去
    -->
    <!--在settings文件中配置私服镜像
        因为在pom中已经配置了远程仓库(maven的主仓库)，所有maven还是会请求maven主仓库
        这时我们需要把所有请求主仓库映射到nexus
        <settings>
        </settings>
    -->

    <!-- 配置远程仓库，包括私服nexus，代理仓库等等 -->
    <repositories>
        <repository>
            <!-- 声明仓库Id，如果重名则覆盖 -->
            <id>nexus</id>
            <!-- 仓库的名字 -->
            <name>Nexus</name>
            <!-- 远程仓库访问地址 -->
            <url>http://localhost:8081/nexus/content/groups/public/</url>
            <!-- default表示maven2和maven3的默认布局 -->
            <layout>default</layout>
            <!-- 发布版本配置 -->
            <releases>
                <!-- 下载 -->
                <enabled>true</enabled>
                <!-- 配置从远程仓库检查更新的频率，
                    daily:每天检查一次，
                    never:从不检查，
                    always:每次构建就检查，
                    interval:X :每隔X分钟检查一次 -->
                <updatePolicy>daily</updatePolicy>
                <!-- 配置检验文件的策略，
                      warn:在执行构建时输出警告，
                      fail:遇到构建错误就让构建失败，
                      ignore:忽略校验和错误-->
                <checksumPolicy>warn</checksumPolicy>
            </releases>
            <!-- 快照版本配置 -->
            <snapshots>
                <!-- 不下载 -->
                <enabled>true</enabled>
                <updatePolicy>daily</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
            </snapshots>
        </repository>
    </repositories>

    <!-- 配置远程插件仓库，包括私服nexus，代理仓库等等 -->
    <pluginRepositories>
        <pluginRepository>
            <!-- 声明插件仓库Id，如果重名则覆盖 -->
            <id>nexus</id>
            <!-- 插件仓库的名字 -->
            <name>Nexus</name>
            <!-- 远程插件仓库访问地址 -->
            <url>http://localhost:8081/nexus/content/groups/public/</url>
            <!-- default表示maven2和maven3的默认布局 -->
            <layout>default</layout>
            <!-- 发布版本配置 -->
            <releases>
                <!-- 下载 -->
                <enabled>true</enabled>
                <!-- 配置从远程插件仓库检查更新的频率，
                    daily:每天检查一次，
                    never:从不检查，
                    always:每次构建就检查，
                    interval:X :每隔X分钟检查一次 -->
                <updatePolicy>daily</updatePolicy>
                <!-- 配置检验文件的策略，
                      warn:在执行构建时输出警告，
                      fail:遇到构建错误就让构建失败，
                      ignore:忽略校验和错误-->
                <checksumPolicy>warn</checksumPolicy>
            </releases>
            <!-- 快照版本配置 -->
            <snapshots>
                <!-- 不下载 -->
                <enabled>true</enabled>
                <updatePolicy>daily</updatePolicy>
                <checksumPolicy>warn</checksumPolicy>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <!-- 将内部的构建部署到远程仓库 -->
    <!-- nexus库对于匿名用户是只读的，需要配置认证信息(settings) -->
    <distributionManagement>
        <!-- 发布版本的构建仓库 -->
        <repository>
            <id>nexus-repository</id>
            <name>Nexus Release Repository</name>
            <url>http://localhost:8081/nexus/content/repositories/releases/</url>
        </repository>
        <!-- 快照版本的构建仓库 -->
        <snapshotRepository>
            <id>nexus-snapshot</id>
            <name>Nexus Snapshot Repository</name>
            <url>http://localhost:8081/nexus/content/repositories/snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

    <!--  maven的settings配置概括
        1.仓库认证，配置登入仓库的用户名和密码
            <settings>
                    ......
                    <servers>
                        <server>
                            <id>需要和在pom里配置的<repository>远程仓库id一致</id>
                            <username>handl</username>
                            <password>123456</password>
                        </server>
                    </servers>
                    ......
                </settings>
       2.镜像仓库：X仓库可以代替Y仓库，比如：中国的maven镜像仓库可以代替maven中央仓库
            <settings>
                    ......
                    <mirrors>
                        <mirror>
                            <id>该镜像的仓库Id</id>
                            <name>该镜像的仓库名称</name>
                            <url>该镜像的仓库访问地址</url>
                            <mirrorOf>配置被代替的仓库的Id</mirrorOf>
                        </mirror>
                    </mirrors>
                    ......
                </settings>

            镜像的用法一般是结合私服nexus，因为私服可以代理所有的外部仓库，
            把私服作为镜像，配置如下：
                <settings>
                    ......
                    <mirrors>
                        <mirror>
                            <id>私服仓库的Id</id>
                            <name>私服仓库名称</name>
                            <url>私服访问地址</url>
                            <mirrorOf>*(* : 代指匹配所有的被镜像仓库)</mirrorOf>
                        </mirror>
                    </mirrors>
                    ......
                </settings>
    -->
</project>