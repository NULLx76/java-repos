<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>se.inera.fmu</groupId>
	<artifactId>fmu</artifactId>
	<version>0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>FMU</name>
	<description>This is FMU project!</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.1.4.RELEASE</version>
	</parent>

	<properties>
		<!-- Maven build properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.7</java.version>
		<start-class>se.inera.fmu.Application</start-class>
		<!-- Maven plugins versions -->
		<maven-enforcer-plugin.version>1.3.1</maven-enforcer-plugin.version>
		<sonar-maven-plugin.version>2.2</sonar-maven-plugin.version>
		<!-- Libraries versions -->
		<activiti.version>5.15</activiti.version>
		<mysql.version>5.1.31</mysql.version>
		<lombok.version>1.14.4</lombok.version>
		<liquibase-core.version>3.2.3</liquibase-core.version> 
		<liquibase_hibernate_version>3.4</liquibase_hibernate_version>
		<liquibase-slf4j.version>1.2.1</liquibase-slf4j.version>
		<assertj-core.version>1.6.0</assertj-core.version>
		<awaitility.version>1.4.0</awaitility.version>
		<commons-lang.version>2.6</commons-lang.version>
		<commons-io.version>2.4</commons-io.version>
		<javax.inject.version>1</javax.inject.version>
		<joda-time-hibernate.version>1.3</joda-time-hibernate.version>
		<json-path.version>0.9.1</json-path.version>
		<geronimo-javamail_1.4_mail.version>1.8.3</geronimo-javamail_1.4_mail.version>
		<hibernate-entitymanager.version>4.3.5.Final</hibernate-entitymanager.version>
		<HikariCP.version>1.3.8</HikariCP.version>
		<metrics-spring.version>3.0.1</metrics-spring.version>
		<swagger-springmvc.version>0.8.5</swagger-springmvc.version>
		<usertype.core.version>3.2.0.GA</usertype.core.version>
		<!-- Only unit tests are run by default. -->
		<skip.integration.tests>true</skip.integration.tests>
		<skip.unit.tests>false</skip.unit.tests>
	</properties>
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- Specifies the build profile id, which is used to find out the correct 
					properties file. This is not actually necessary for this example, but it 
					can be used for other purposes. -->
				<!-- Spring profile to use -->
				<spring.profiles.active>dev</spring.profiles.active>
				<!-- log configuration -->
				<logback.loglevel>DEBUG</logback.loglevel>
			</properties>
			<build>
				<filters>
					<!-- Specifies path to the properties file, which contains profile specific 
						configuration. In this case, the configuration file is searched from config/ 
						directory. -->
					<filter>src/main/resources/config/application-${spring.profiles.active}.yml</filter>
				</filters>
				<resources>
					<!-- Placeholders found from files located in the configured resource 
						directories are replaced with values found from the profile specific configuration 
						files. -->
					<resource>
						<filtering>true</filtering>
						<directory>src/main/resources</directory>
						<!-- You can also include only specific files found from the configured 
							directory or exclude files. This can be done by uncommenting following sections 
							and adding the configuration under includes and excludes tags. -->
						<!-- <includes> <include></include> </includes> <excludes> <exclude></exclude> 
							</excludes> -->
					</resource>
				</resources>
			</build>
		</profile>

		<profile>
			<id>prod</id>
			<properties>
				<!-- Spring profile to use -->
				<spring.profiles.active>prod</spring.profiles.active>
				<!-- log configuration -->
				<logback.loglevel>INFO</logback.loglevel>
				<logback.appender>CONSOLE</logback.appender>
			</properties>
			<build>
				<filters>
					<!-- Specifies path to the properties file, which contains profile specific 
						configuration. In this case, the configuration file is searched from config/ 
						directory. -->
					<filter>src/main/resources/config/application-${spring.profiles.active}.yml</filter>
				</filters>
				<resources>
					<!-- Placeholders found from files located in the configured resource 
						directories are replaced with values found from the profile specific configuration 
						files. -->
					<resource>
						<filtering>true</filtering>
						<directory>src/main/resources</directory>
						<!-- You can also include only specific files found from the configured 
							directory or exclude files. This can be done by uncommenting following sections 
							and adding the configuration under includes and excludes tags. -->
						<!-- <includes> <include></include> </includes> <excludes> <exclude></exclude> 
							</excludes> -->
					</resource>
				</resources>
				<plugins>
					<!-- Use this plugin to integrate the yeoman build into your maven build. -->
					<plugin>
					    <groupId>com.github.eirslett</groupId>
					    <artifactId>frontend-maven-plugin</artifactId>
					    <version>0.0.22</version>

    					<!-- optional -->
    					<configuration>
        					<workingDirectory>./</workingDirectory>
    					</configuration>

    					<executions>
    						<execution>
								    <!-- optional: you don't really need execution ids,
								    but it looks nice in your build log. -->
								    <id>install node and npm</id>
								    <goals>
								        <goal>install-node-and-npm</goal>
								    </goals>
								    <!-- optional: default phase is "generate-resources" -->
								    <phase>generate-resources</phase>
								    <configuration>
								        <nodeVersion>v0.10.34</nodeVersion>
								        <npmVersion>1.4.28</npmVersion>
								    </configuration>
							</execution>
						    <execution>
							    <id>npm install</id>
							    <goals>
							        <goal>npm</goal>
							    </goals>

							    <!-- optional: default phase is "generate-resources" -->
							    <phase>generate-resources</phase>

							    <configuration>
							        <arguments>install</arguments>
							    </configuration>
							</execution>
							<execution>
							    <id>bower install</id>
							    <goals>
							        <goal>bower</goal>
							    </goals>

							    <configuration>
							        <arguments>install</arguments>
							    </configuration>
							</execution>
							<execution>
							    <id>gulp build</id>
							    <goals>
							        <goal>gulp</goal>
							    </goals>

							    <!-- optional: the default phase is "generate-resources" -->
							    <phase>generate-resources</phase>

							    <configuration>
							        <arguments>--verbose</arguments>
							    </configuration>
							</execution>

							<execution>
							    <id>javascript tests</id>
							    <goals>
							        <goal>karma</goal>
							    </goals>

							    <!-- optional: the default plase is "test". Some developers
							    choose to run karma in the "integration-test" phase. -->
							    <phase>test</phase>

							    <configuration>
							        <!-- optional: the default is "karma.conf.js" in your working directory -->
							        <karmaConfPath>src/test/javascript/karma.conf.js</karmaConfPath>
							    </configuration>
							</execution>
						</executions>
					</plugin>
					<!-- The Clean Plugin is used when you want to remove files generated 
						at build-time in a project's directory. -->
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<version>2.5</version>
						<configuration>
							<filesets>
								<fileset>
									<directory>src/main/webapp/dist</directory>
								</fileset>
								<fileset>
									<directory>.tmp</directory>
								</fileset>
								<fileset>
									<directory>node_modules</directory>
								</fileset>
							</filesets>
						</configuration>
					</plugin>
                    <!--
                    -->
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<arguments>
								<argument>--spring.profiles.active=prod</argument>
							</arguments>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.liquibase</groupId>
						<artifactId>liquibase-maven-plugin</artifactId>
						<version>${liquibase-core.version}</version>
						<configuration>
							<propertyFile>target/classes/liquibase.properties</propertyFile>
						</configuration>
						<dependencies>
							<dependency>
								<groupId>org.liquibase.ext</groupId>
								<artifactId>liquibase-hibernate4</artifactId>
								<version>${liquibase_hibernate_version}</version>
								<exclusions>
									<exclusion>
										<groupId>org.hibernate.javax.persistence</groupId>
										<artifactId>hibernate-jpa-2.0-api</artifactId>
									</exclusion>
								</exclusions>
							</dependency>
							<dependency>
								<groupId>org.springframework</groupId>
								<artifactId>spring-core</artifactId>
								<version>${spring.version}</version>
							</dependency>
							<dependency>
								<groupId>org.springframework</groupId>
								<artifactId>spring-context</artifactId>
								<version>${spring.version}</version>
							</dependency>
							<dependency>
								<groupId>org.springframework</groupId>
								<artifactId>spring-beans</artifactId>
								<version>${spring.version}</version>
							</dependency>
							<dependency>
								<groupId>mysql</groupId>
								<artifactId>mysql-connector-java</artifactId>
								<version>${mysql.version}</version>
							</dependency>
							<dependency>
								<groupId>org.springframework</groupId>
								<artifactId>spring-orm</artifactId>
								<version>${spring.version}</version>
							</dependency>
							<dependency>
								<groupId>org.hibernate</groupId>
								<artifactId>hibernate-core</artifactId>
								<version>${hibernate.version}</version>
							</dependency>
							<dependency>
								<groupId>org.hibernate</groupId>
								<artifactId>hibernate-entitymanager</artifactId>
								<version>${hibernate-entitymanager.version}</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>integration-test</id>
			<properties>
				<!-- Used to locate the profile specific configuration file. -->
				<build.profile.id>integration-test</build.profile.id>
				<!-- log configuration -->
				<logback.loglevel>INFO</logback.loglevel>
				<logback.appender>CONSOLE</logback.appender>
				<!-- Only integration tests are run. -->
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>true</skip.unit.tests>
			</properties>
			<build>
				<filters>
					<!-- Specifies path to the properties file, which contains profile specific 
						configuration. In this case, the configuration file is searched from profiles/dev/ 
						directory. -->
					<filter>src/main/resources/config/application-${build.profile.id}.yml</filter>
				</filters>
				<resources>
					<!-- Placeholders found from files located in the configured resource 
						directories are replaced with values found from the profile specific configuration 
						files. -->
					<resource>
						<filtering>true</filtering>
						<directory>src/main/resources</directory>
						<!-- You can also include only specific files found from the configured 
							directory or exclude files. This can be done by uncommenting following sections 
							and adding the configuration under includes and excludes tags. -->
						<!-- <includes> <include></include> </includes> <excludes> <exclude></exclude> 
							</excludes> -->
					</resource>
				</resources>
			</build>
		</profile>

	</profiles>

	<prerequisites>
		<maven>3.0.0</maven>
	</prerequisites>

	<dependencies>

		<!-- Metrics -->
		<dependency>
			<groupId>com.codahale.metrics</groupId>
			<artifactId>metrics-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.codahale.metrics</groupId>
			<artifactId>metrics-ehcache</artifactId>
			<version>${codahale-metrics.version}</version>
		</dependency>
		<dependency>
			<groupId>com.codahale.metrics</groupId>
			<artifactId>metrics-graphite</artifactId>
		</dependency>
		<dependency>
			<groupId>com.codahale.metrics</groupId>
			<artifactId>metrics-jvm</artifactId>
			<version>${codahale-metrics.version}</version>
		</dependency>
		<dependency>
			<groupId>com.codahale.metrics</groupId>
			<artifactId>metrics-servlet</artifactId>
			<version>${codahale-metrics.version}</version>
		</dependency>
		<dependency>
			<groupId>com.codahale.metrics</groupId>
			<artifactId>metrics-json</artifactId>
			<version>${codahale-metrics.version}</version>
		</dependency>
		<dependency>
			<groupId>com.codahale.metrics</groupId>
			<artifactId>metrics-servlets</artifactId>
			<exclusions>
				<exclusion>
					<groupId>com.codahale.metrics</groupId>
					<artifactId>metrics-healthchecks</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.ryantenney.metrics</groupId>
			<artifactId>metrics-spring</artifactId>
			<version>${metrics-spring.version}</version>
		</dependency>

		<!-- Jackson -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.13</version>
		</dependency>
		
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-json-org</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-hppc</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-hibernate4</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-joda</artifactId>
		</dependency>

		<!-- Hikari -->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>${HikariCP.version}</version>
			<exclusions>
				<exclusion>
					<groupId>com.sun</groupId>
					<artifactId>tools</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Commons -->
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>${commons-lang.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
		</dependency>

		<!-- Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>${javax.inject.version}</version>
		</dependency>

		<!-- Joda -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
		</dependency>
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time-hibernate</artifactId>
			<version>${joda-time-hibernate.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jadira.usertype</groupId>
			<artifactId>usertype.core</artifactId>
			<version>${usertype.core.version}</version>
		</dependency>

		<!-- Mail -->
		<dependency>
			<groupId>org.apache.geronimo.javamail</groupId>
			<artifactId>geronimo-javamail_1.4_mail</artifactId>
			<version>${geronimo-javamail_1.4_mail.version}</version>
		</dependency>

		<!-- Hibernate -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernate-entitymanager.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-ehcache</artifactId>
			<version>${hibernate-entitymanager.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>

		<!-- Liquibase -->
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-servlet</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.liquibase.ext</groupId>
			<artifactId>liquibase-hibernate4</artifactId>
			<version>${liquibase_hibernate_version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.hibernate.javax.persistence</groupId>
					<artifactId>hibernate-jpa-2.0-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.mattbertolini</groupId>
			<artifactId>liquibase-slf4j</artifactId>
			<version>${liquibase-slf4j.version}</version>
		</dependency>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-autoconfigure</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-loader-tools</artifactId>
			<version>${spring-boot.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-logging</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<!-- To build a war file that is both executable and deployable into an 
				external container you need to mark the embedded container dependencies as 
				“provided” -->
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
		</dependency>
		<dependency>
			<groupId>com.mangofactory</groupId>
			<artifactId>swagger-springmvc</artifactId>
			<version>${swagger-springmvc.version}</version>
		</dependency>

		<!-- Database dependencies -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

		<!-- Test dependencies -->
		<dependency>
			<groupId>com.jayway.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>${awaitility.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.jayway.jsonpath</groupId>
			<artifactId>json-path</artifactId>
			<version>${json-path.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<version>${assertj-core.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- To reduce biolerplate code: lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
		</dependency>

        <!-- For event bus -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>18.0</version>
		</dependency>

        <!-- For WebServices: Spring WS -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-ws</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>
        <dependency>
            <groupId>wsdl4j</groupId>
            <artifactId>wsdl4j</artifactId>
            <version>1.6.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.ws</groupId>
            <artifactId>spring-ws-test</artifactId>
            <version>2.2.0.RELEASE</version>
        </dependency>

		<dependency>
			<groupId>org.springframework.security.extensions</groupId>
			<artifactId>spring-security-saml2-core</artifactId>
			<version>1.0.0.RELEASE</version>
		</dependency>

        <dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-api</artifactId>
			<version>2.7.4</version>
		</dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.3.2</version>
        </dependency>

  		<dependency>
			<groupId>commons-validator</groupId>
			<artifactId>commons-validator</artifactId>
			<version>1.4.0</version>
		</dependency>
  
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
        </dependency>

        <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-starter-velocity</artifactId>
        </dependency>

        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>2.5</version>
        </dependency>

	</dependencies>
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<!-- The Resources Plugin handles the copying of project resources to 
				the output directory. There are two different kinds of resources: main resources 
				and test resources. The difference is that the main resources are the resources 
				associated to the main source code while the test resources are associated 
				to the test source code. -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<!-- The Enforcer plugin provides goals to control certain environmental 
				constraints such as Maven version, JDK version and OS family along with many 
				more standard rules and user created rules. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>${maven-enforcer-plugin.version}</version>
				<executions>
					<execution>
						<id>enforce-versions</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireMavenVersion>
									<message>You are running an older version of Maven. JHipster
										requires at least Maven 3.0</message>
									<version>[3.0.0,)</version>
								</requireMavenVersion>
								<requireJavaVersion>
									<message>You are running an older version of Java. JHipster
										requires at least JDK 1.7</message>
									<version>[1.7.0,)</version>
								</requireJavaVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- We will use the Surefire Maven plugin to run our unit tests. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<!-- Force alphabetical order to have a reproducible build -->
					<runOrder>alphabetical</runOrder>
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					<skipTests>${skip.unit.tests}</skipTests>
					<!-- Excludes integration tests when unit tests are run. ß -->
					<excludes>
						<exclude>**/IT*.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			<!-- This plugin contains various small independent goals to assist with 
				the Maven build lifecycle. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<!-- States that the plugin's add-test-source goal is executed at generate-test-sources 
						phase. -->
					<execution>
						<id>add-integration-test-sources</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<!-- Configures the source directory of integration tests. -->
							<sources>
								<source>src/integration-test/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- The Failsafe Maven plugin is used to execute our integration tests. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.12</version>
				<executions>
					<!-- States that both integration-test and verify goals of the Failsafe 
						Maven plugin are executed. -->
					<execution>
						<id>integration-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<!-- Skips integration tests if the value of skip.integration.tests 
								property is true -->
							<skipTests>${skip.integration.tests}</skipTests>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- The WAR Plugin is responsible for collecting all artifact dependencies, 
				classes and resources of the web application and packaging them into a web 
				application archive. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<packagingExcludes>WEB-INF/lib/tomcat-*.jar</packagingExcludes>
				</configuration>
			</plugin>
			<!-- The Eclipse Plugin is used to generate Eclipse IDE files (*.classpath, 
				*.wtpmodules and the .settings folder) for use with a project. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<configuration>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>
			<!-- SonarQube™ is an open source platform for Continuous Inspection of 
				code quality. The Maven Plugin triggers the code analyzers. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar-maven-plugin.version}</version>
			</plugin>
			<!-- Provides spring-boot:run goal for Maven, so the application can be 
				easily run without packaging. -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<arguments>
						<argument>--spring.profiles.active=dev</argument>
					</arguments>
				</configuration>
			</plugin>
            <!--
                -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jaxb2-maven-plugin</artifactId>
                <version>1.6</version>
                <executions>
                    <execution>
                        <id>xjc</id>
                        <goals>
                            <goal>xjc</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <schemaDirectory>${project.basedir}/src/main/resources/ws/</schemaDirectory>
                    <outputDirectory>${project.basedir}/src/main/java</outputDirectory>
                    <clearOutputDir>false</clearOutputDir>
                </configuration>
            </plugin>
            <!-- To generate Java classes from the WSDL; this plugin will generate classes for the WSDL found at the
                specified URL, putting those classes in the fk.wsdl package.
            -->
            <plugin>
                <groupId>org.jvnet.jaxb2.maven2</groupId>
                <artifactId>maven-jaxb2-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <schemaLanguage>WSDL</schemaLanguage>
                    <generatePackage>fk.wsdl</generatePackage>
                    <forceRegenerate>false</forceRegenerate>
                    <schemaDirectory>${project.basedir}/src/main/resources/ws/ext/</schemaDirectory>
                    <schemaIncludes>
                        <include>*.wsdl</include>
                    </schemaIncludes>
                </configuration>
            </plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[1.0,)
										</versionRange>
										<goals>
											<goal>copy</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-enforcer-plugin</artifactId>
										<versionRange>
											[1.0,)
										</versionRange>
										<goals>
											<goal>enforce</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
