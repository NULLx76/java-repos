<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>

    <groupId>com.savagehomeautomation.raspi</groupId>
    <artifactId>pi4j-demos</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!-- PROJECT PROPERTIES -->
    <properties>
        <!-- Pi4J VERSION -->
        <pi4j.version>1.0-SNAPSHOT</pi4j.version>

        <!-- SETTINGS FOR COPYING Pi4J ARTIFACTS TO DEVELOPMENT RASPBERRY PI -->
        <pi.host>192.168.2.2</pi.host>
        <pi.port>22</pi.port>
        <pi.user>pi</pi.user>
        <pi.password>raspberry</pi.password>
        <pi.target.path>/home/pi/${artifactId}</pi.target.path>
        <pi.screen.name>dev</pi.screen.name>
    </properties>

    <!-- PROJECT DEPENDENCIES -->
    <dependencies>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-core</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-device</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.fusesource.jansi</groupId>
            <artifactId>jansi</artifactId>
            <version>1.11</version>
        </dependency>
    </dependencies>

    <!-- PROJECT BUILD -->
    <build>
        <plugins>

            <!-- COPY PROJECT DEPENDENCIES TO TARGET OUTPUT FOLDER -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.8</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <excludeTransitive>true</excludeTransitive>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- OPTIONALLY DEPLOY THE COMPILED PROJECT TO THE RASPBERRY PI -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>

                    <!-- copy the compiled JAR file to the Raspberry Pi platform platform -->
                    <execution>
                        <id>transfer-compiled-pi4j-jar</id>
                        <phase>install</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <taskdef resource="net/sf/antcontrib/antcontrib.properties"
                                         classpathref="maven.plugin.classpath" />

                                <!-- ensure the target directory exists on the Raspberry Pi -->
                                <sshexec host="${pi.host}" port="${pi.port}" username="${pi.user}"
                                         password="${pi.password}" trust="true" failonerror="false"
                                         verbose="true" command="mkdir --parents ${pi.target.path}; rm -rf ${pi.target.path}/*" />

                                <!-- if the screen does not exist on the remote PI, then start it -->
                                <!-- if the screen does already exist on the remote PI, then send CTRL-C to stop current running program -->
                                <sshexec host="${pi.host}" port="${pi.port}" username="${pi.user}"
                                         password="${pi.password}" trust="true" failonerror="true" verbose="true"
                                         command=" if screen -ls | grep -q ${pi.screen.name}; then screen -S ${pi.screen.name} -X stuff '\n^C\n\n'; else screen -d -m -S ${pi.screen.name}; fi" />

                                <!-- copy the JAR files to the Raspberry Pi -->
                                <scp todir="${pi.user}:${pi.password}@${pi.host}:${pi.target.path}"
                                     port="${pi.port}" trust="true" verbose="true" failonerror="true">
                                    <fileset dir="${project.build.directory}" includes="**/*.jar"/>
                                    <fileset dir="${project.build.sourceDirectory}" includes="**/*.java"/>
                                    <fileset dir="${project.build.scriptSourceDirectory}" includes="**/*.sh"/>
                                </scp>

                                <!-- set file permissions -->
                                <sshexec host="${pi.host}" port="${pi.port}" username="${pi.user}"
                                         password="${pi.password}" trust="true" failonerror="true"
                                         verbose="true" command="chmod +x+s ${pi.target.path}/*.sh" />

                                <!-- run compiled project remotely on the Pi using a named screen-->
                                <sshexec host="${pi.host}" port="${pi.port}" username="${pi.user}"
                                         password="${pi.password}" trust="true" failonerror="true" verbose="true"
                                         command="screen -S ${pi.screen.name} -X stuff 'cd ${pi.target.path}\n./run.sh\n'" />
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant-jsch</artifactId>
                        <version>1.7.1</version>
                    </dependency>
                    <dependency>
                        <groupId>com.jcraft</groupId>
                        <artifactId>jsch</artifactId>
                        <version>0.1.42</version>
                    </dependency>
                    <dependency>
                        <groupId>ant-contrib</groupId>
                        <artifactId>ant-contrib</artifactId>
                        <version>20020829</version>
                    </dependency>
                </dependencies>
            </plugin>

        </plugins>
    </build>

    <!-- INCLUDE MAVEN REPOSITORY TO RESOLVE PI4J SNAPSHOT BUILDS -->
    <repositories>
        <repository>
            <id>oss-snapshots-repo</id>
            <name>Sonatype OSS Maven Repository</name>
            <url>https://oss.sonatype.org/content/groups/public</url>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>daily</updatePolicy>
            </snapshots>
        </repository>
    </repositories>

</project>