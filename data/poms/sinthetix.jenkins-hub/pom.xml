<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.jenkins-ci.plugins</groupId>
		<artifactId>plugin</artifactId>
		<!-- which version of Jenkins is this plugin built against? -->
		<version>1.580.3</version>
		<relativePath></relativePath>
	</parent>

	<groupId>com.blackducksoftware.integration</groupId>
	<artifactId>hub-jenkins</artifactId>
	<version>1.5.0-SNAPSHOT</version>
	<!-- !!! Also update the url below on release !!! -->
	<packaging>hpi</packaging>
	<name>Black Duck Hub Plug-In for Jenkins</name>
	<description>Runs the Black Duck Hub scan in Jenkins build</description>
	<inceptionYear>2014</inceptionYear>

	<url>https://github.com/blackducksoftware/jenkins-hub</url>

	<licenses>
		<license>
			<name>GNU General Public License 2 only</name>
			<url>http://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html</url>
		</license>
	</licenses>
	
	<organization>
		<name>Black Duck Software, Inc.</name>
		<url>http://www.blackducksoftware.com/</url>
	</organization>
	<developers>
		<developer>
			<id>kkandler</id>
			<name>Kaj Kandler</name>
			<organization>Black Duck Software, Inc.</organization>
			<roles>
				<role>architect</role>
				<role>developer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
		<developer>
			<id>jrichard</id>
			<name>James Richard</name>
			<organization>Black Duck Software, Inc.</organization>
			<roles>
				<role>developer</role>
			</roles>
			<timezone>-5</timezone>
		</developer>
	</developers>
	<contributors>
	</contributors>

	<!-- get every artifact through repo.jenkins-ci.org, which proxies all the 
		artifacts that we need -->
	<repositories>
		<repository>
			<id>repo.jenkins-ci.org</id>
			<name>jenkins</name>
			<url>http://repo.jenkins-ci.org/public/</url>
		</repository>
		<repository>
			<id>bds-int-public</id>
			<url>https://updates.suite.blackducksoftware.com/integrations/</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>repo.jenkins-ci.org</id>
			<url>http://repo.jenkins-ci.org/public/</url>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<repository>
			<id>bds-int-public</id>
			<url>https://updates.suite.blackducksoftware.com/bdhubjenkins</url>
		</repository>
		<snapshotRepository>
			<id>bds-int-public</id>
			<url>https://updates.suite.blackducksoftware.com/bdhubjenkins</url>
		</snapshotRepository>
	</distributionManagement>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.blackducksoftware.integration</groupId>
			<artifactId>hub-common</artifactId>
			<version>1.3.0</version>
			<exclusions>
				<exclusion>
					<groupId>com.thoughtworks.xstream</groupId>
					<artifactId>xstream</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.blackducksoftware.integration</groupId>
			<artifactId>build-info-gradle</artifactId>
			<version>2.0.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.jenkins-ci.plugins</groupId>
			<artifactId>gradle</artifactId>
			<version>[1.24,)</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.jenkins-ci.main</groupId>
			<artifactId>maven-plugin</artifactId>
			<version>[2.5,)</version>
			<optional>true</optional>
			<exclusions>
				<exclusion>
					<groupId>org.jenkins-ci</groupId>
					<artifactId>SECURITY-144-compat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.jenkins-ci.main</groupId>
			<artifactId>remoting</artifactId>
			<version>2.47</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jenkins-ci.plugins</groupId>
			<artifactId>credentials</artifactId>
			<version>[1.9.4,1.15]</version>
		</dependency>
		<dependency>
			<groupId>org.kohsuke.stapler</groupId>
			<artifactId>json-lib</artifactId>
			<version>2.1-rev7</version>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-jdk14</artifactId>
			<version>1.7.5</version>
		</dependency>
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.3</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.4.1</version>
		</dependency>
		<dependency>
			<groupId>org.jvnet.localizer</groupId>
			<artifactId>localizer</artifactId>
			<version>1.10</version>
		</dependency>

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mortbay.jetty</groupId>
			<artifactId>servlet-api-2.5</artifactId>
			<version>6.1.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<!-- Add so Eclipse m2e can pick those up - if you see a error in 
									eclipse about this click and select discover to install the m2e mapping for 
									this maven plugin -->
								<source>${project.build.directory}/generated-sources/localizer/</source>
								<source>${project.build.directory}/generated-sources/annotations/</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<!-- put your configurations here -->
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jenkins-ci.tools</groupId>
				<artifactId>maven-hpi-plugin</artifactId>
				<version>1.106</version>
				<configuration>
					<pluginFirstClassLoader>false</pluginFirstClassLoader>
					<hpiName>${project.artifactId}-${project.version}</hpiName>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.1</version>
					<configuration>
						<!-- put your configurations here -->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>0.7.5.201505241946</version>
					<executions>
						<execution>
							<id>pre-unit-test</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
							<configuration>
								<!-- Sets the path to the file which contains the execution data. -->
								<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
								<!-- Sets the name of the property containing the settings for JaCoCo 
									runtime agent. -->
								<propertyName>surefireArgLine</propertyName>
							</configuration>
						</execution>
						<!-- Ensures that the code coverage report for unit tests is created 
							after unit tests have been run. -->
						<execution>
							<id>post-unit-test</id>
							<phase>test</phase>
							<goals>
								<goal>report</goal>
							</goals>
							<configuration>
								<!-- Sets the path to the file which contains the execution data. -->
								<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
								<!-- Sets the output directory for the code coverage report. -->
								<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<configuration>
						<classpathContainers>
							<classpathContainer>
								org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6
							</classpathContainer>
            </classpathContainers>
            <source>1.6</source>
            <target>1.6</target>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <versionRange>[0.5,)
										</versionRange>
                    <goals>
                      <goal>prepare-agent</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore/>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
        <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-dependency-plugin</artifactId>
			<version>2.10</version>
			<executions>
				<execution>
					<id>copy-dependencies</id>
					<phase>package</phase>
					<goals>
						<goal>copy-dependencies</goal>
					</goals>
					<configuration>
						<includeScope>compile</includeScope>
						<useSubDirectoryPerScope>true</useSubDirectoryPerScope>
						<outputDirectory>${project.build.directory}/libs</outputDirectory>
					</configuration>
				</execution>
			</executions>
		</plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
