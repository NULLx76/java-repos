<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>testbed</groupId>
    <artifactId>testbed</artifactId>
    <version>1.1-SNAPSHOT</version>
    <packaging>pom</packaging>
    <modules>
        <module>hibernate-proxies</module>
        <module>multiple-artifacts</module>
        <module>basic-jersey</module>
        <module>basic-springmvc</module>
        <module>hibernate-stalestateexception</module>
        <module>hibernate-eager-fetching</module>
        <module>hibernate-create-drop</module>
        <module>miscellaneous</module>
        <module>asm-playground</module>
        <module>log4j-reconfigure-on-the-fly</module>
        <module>jersey-with-streaming-xml-response</module>
        <module>clojure-playground</module>
        <module>scala-playground</module>
        <module>scalatest</module>
        <module>basic-aspectj</module>
        <module>basic-spring-jms</module>
        <module>hibernate-multi-many-to-ones</module>
        <module>serviceloader-example</module>
        <module>hibernate-unidirectional-one-to-many-with-join-column</module>
        <module>hibernate-any</module>
        <module>groovy-cross-compiled-with-java-without-javac</module>
        <module>spring-aspectj-build-time-weaving</module>
        <module>hibernate-with-xml-mappings</module>
        <module>groovy-cross-compiled-with-java-with-stubs</module>
        <module>spring-aspectj-load-time-weaving-in-jetty</module>
        <module>stackoverflow</module>
        <module>assembly-plugin-fat-jar</module>
        <module>multiple-transactions-spanning-multiple-contexts</module>
        <module>spring-test-framework-with-java-config-mockito-beans</module>
        <module>spring-method-caching</module>
        <module>spring-with-impala-dynamic-properties</module>
        <module>guava-concatenate-streams</module>
        <module>spring-data</module>
        <module>spring-mvc</module>
        <module>spring</module>
        <module>groovy2-with-gmaven</module>
    </modules>
    <properties>
<!--
        <mainClass>If you see this, then you're trying to run "mvn exec:java" without overriding this "mainClass" POM property or otherwise providing a main class to the exec plugin.</mainClass>
-->
    </properties>
    <scm>
        <developerConnection>scm:git|ssh://git@github.com/zzantozz/testbed.git</developerConnection>
    </scm>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <source>1.6</source>
                    <target>1.6</target>
                </configuration>
            </plugin>
<!-- Not sure exactly why I did this, but it prevents me from using -D exec.mainClass at the command line.
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <executions>
                    <execution>
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>${mainClass}</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
-->
        </plugins>
    </build>
    <repositories>
        <repository>
            <id>maven2-repository.java.net</id>
            <name>Java.net Repository for Maven</name>
            <url>http://download.java.net/maven/2/</url>
            <layout>default</layout>
        </repository>
    </repositories>
    <dependencies>
        <dependency>
            <!-- This is only here because IntelliJ is all-or-nothing when it comes to the aspectj compiler. Either you're compiling with javac or with ajc.
                Therefore if you're in a module that doesn't have aspectjrt on the classpath, you'll get a compiler error. -->
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>1.6.11</version>
        </dependency>
    </dependencies>
</project>
